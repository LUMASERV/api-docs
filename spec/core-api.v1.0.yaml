openapi: 3.0.0
info:
  title: LUMASERV Core API
  version: '1.0'
  contact:
    name: LUMASERV Support Team
    email: support@lumaserv.com
  description: LUMASERV Core API
servers:
  - url: 'https://api.lumaserv.cloud'
    description: Live
tags:
  - name: address
  - name: dns
  - name: domains
  - name: label
  - name: plesk-licenses
  - name: pricing
  - name: s3-storage
  - name: server
  - name: sshkeys
  - name: ssl
paths:
  /storage/s3/buckets:
    get:
      summary: getS3Buckets
      tags:
        - s3-storage
      responses:
        '200':
          $ref: '#/components/responses/S3BucketListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getS3Buckets
      description: Returns all s3 buckets
      parameters:
        - $ref: '#/components/parameters/ProjectIDFilter'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/LabelsFilter'
        - $ref: '#/components/parameters/WithLabels'
    post:
      summary: createS3Bucket
      operationId: createS3Bucket
      responses:
        '201':
          $ref: '#/components/responses/S3BucketSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Creates a new s3 bucket
      tags:
        - s3-storage
      requestBody:
        $ref: '#/components/requestBodies/S3BucketCreateRequest'
  '/storage/s3/buckets/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: S3 Bucket ID
    get:
      summary: getS3Bucket
      tags:
        - s3-storage
      responses:
        '200':
          $ref: '#/components/responses/S3BucketSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getS3Bucket
      description: Returns a single s3 bucket
    delete:
      summary: deleteS3Bucket
      operationId: deleteS3Bucket
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - s3-storage
      description: Deletes a s3 bucket
  /storage/s3/access-keys:
    get:
      summary: getS3AccessKeys
      tags:
        - s3-storage
      responses:
        '200':
          $ref: '#/components/responses/S3AccessKeyListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getS3AccessKeys
      description: Returns all access keys
      parameters:
        - $ref: '#/components/parameters/ProjectIDFilter'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/LabelsFilter'
        - $ref: '#/components/parameters/WithLabels'
    post:
      summary: createS3AccessKey
      operationId: createS3AccessKey
      responses:
        '201':
          $ref: '#/components/responses/S3AccessKeySingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - s3-storage
      description: Creates a s3 access key
      requestBody:
        $ref: '#/components/requestBodies/S3AccessKeyCreateRequest'
  '/storage/s3/access-keys/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: S3 Access Key ID
    get:
      summary: getS3AccessKey
      tags:
        - s3-storage
      responses:
        '200':
          $ref: '#/components/responses/S3AccessKeySingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getS3AccessKey
      description: Returns a single s3 access key
    delete:
      summary: deleteS3AccessKey
      operationId: deleteS3AccessKey
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - s3-storage
      description: Deletes a s3 access key
  /licenses/plesk:
    get:
      summary: getPleskLicenses
      tags:
        - plesk-licenses
      operationId: getPleskLicenses
      description: Returns all plesk licenses
      responses:
        '200':
          $ref: '#/components/responses/PleskLicenseListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      parameters:
        - $ref: '#/components/parameters/ProjectIDFilter'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - schema:
            type: string
            format: uuid
          in: query
          name: 'filter[type_id]'
          description: Plesk License Type ID
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/LabelsFilter'
        - $ref: '#/components/parameters/WithLabels'
    post:
      summary: createPleskLicense
      operationId: createPleskLicense
      responses:
        '201':
          $ref: '#/components/responses/PleskLicenseSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - plesk-licenses
      description: Orders a new plesk license
      requestBody:
        $ref: '#/components/requestBodies/PleskLicenseCreateRequest'
  '/licenses/plesk/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Plesk License ID
    get:
      summary: getPleskLicense
      tags:
        - plesk-licenses
      responses:
        '200':
          $ref: '#/components/responses/PleskLicenseSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getPleskLicense
      description: Returns a single plesk license
    put:
      summary: updatePleskLicense
      operationId: updatePleskLicense
      responses:
        '200':
          $ref: '#/components/responses/PleskLicenseSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - plesk-licenses
      description: Updates a plesk license
      requestBody:
        $ref: '#/components/requestBodies/PleskLicenseUpdateRequest'
  /licenses/plesk-types:
    get:
      summary: getPleskLicenseTypes
      tags:
        - plesk-licenses
      responses:
        '200':
          $ref: '#/components/responses/PleskLicenseTypeListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getPleskLicenseTypes
      description: Return all plesk license types
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
  '/licenses/plesk-types/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Plesk License Type ID
    get:
      summary: getPleskLicenseType
      tags:
        - plesk-licenses
      responses:
        '200':
          $ref: '#/components/responses/PleskLicenseTypeSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getPleskLicenseType
      description: Returns a single plesk license type
  '/storage/s3/access-keys/{access_key_id}/grants':
    parameters:
      - schema:
          type: string
          format: uuid
        name: access_key_id
        in: path
        required: true
        description: S3 Access Key ID
    get:
      summary: getS3AccessKeyGrants
      tags:
        - s3-storage
      responses:
        '200':
          $ref: '#/components/responses/S3AccessGrantListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getS3AccessKeyGrants
      description: Returns all grants for the s3 access key
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/LabelsFilter'
        - $ref: '#/components/parameters/WithLabels'
    post:
      summary: createS3AccessKeyGrant
      operationId: createS3AccessKeyGrant
      responses:
        '201':
          $ref: '#/components/responses/S3AccessGrantSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - s3-storage
      description: Creates a new grant for the s3 access key
      requestBody:
        $ref: '#/components/requestBodies/S3AccessGrantCreateRequest'
  '/storage/s3/access-keys/{access_key_id}/grants/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: access_key_id
        in: path
        required: true
        description: S3 Access Key ID
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: S3 Access Grant ID
    delete:
      summary: deleteS3AccessKeyGrant
      operationId: deleteS3AccessKeyGrant
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Deletes a grant of a s3 access key
      tags:
        - s3-storage
  /domain-handles:
    get:
      summary: getDomainHandles
      tags:
        - domains
      responses:
        '200':
          $ref: '#/components/responses/DomainHandleListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getDomainHandles
      description: Returns all domain handles
      parameters:
        - $ref: '#/components/parameters/ProjectIDFilter'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/LabelsFilter'
        - $ref: '#/components/parameters/WithLabels'
    post:
      summary: createDomainHandle
      operationId: createDomainHandle
      responses:
        '201':
          $ref: '#/components/responses/DomainHandleSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Creates a domain handle
      requestBody:
        $ref: '#/components/requestBodies/DomainHandleCreateRequest'
  '/domain-handles/{code}':
    parameters:
      - schema:
          type: string
        name: code
        in: path
        required: true
    get:
      summary: getDomainHandle
      tags:
        - domains
      responses:
        '200':
          $ref: '#/components/responses/DomainHandleSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getDomainHandle
      description: Returns a single domain handle
    put:
      summary: updateDomainHandle
      operationId: updateDomainHandle
      responses:
        '200':
          $ref: '#/components/responses/DomainHandleSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Updates the domain handle
      requestBody:
        $ref: '#/components/requestBodies/DomainHandleUpdateRequest'
    delete:
      summary: deleteDomainHandle
      operationId: deleteDomainHandle
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Deletes the domain handle
  /domains:
    get:
      summary: getDomains
      tags:
        - domains
      responses:
        '200':
          $ref: '#/components/responses/DomainListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getDomains
      description: Returns all domains
      parameters:
        - $ref: '#/components/parameters/ProjectIDFilter'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - schema:
            type: string
          in: query
          name: 'filter[owner_handle_code]'
          description: Handle Code of Owner Handle
        - schema:
            type: string
          in: query
          name: 'filter[admin_handle_code]'
          description: Handle Code of Admin Handle
        - schema:
            type: string
          in: query
          name: 'filter[tech_handle_code]'
          description: Handle Code of Tech Handle
        - schema:
            type: string
          in: query
          name: 'filter[zone_handle_code]'
          description: Handle Code of Zone Handle
        - schema:
            type: string
          in: query
          name: 'filter[tld]'
          description: TLD
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/LabelsFilter'
        - $ref: '#/components/parameters/WithLabels'
    post:
      summary: createDomain
      operationId: createDomain
      responses:
        '201':
          $ref: '#/components/responses/DomainSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Registers or transfer a domain
      requestBody:
        $ref: '#/components/requestBodies/DomainCreateRequest'
  '/domains/{name}':
    parameters:
      - schema:
          type: string
          format: hostname
        name: name
        in: path
        required: true
        description: Domain Name
    get:
      summary: getDomain
      tags:
        - domains
      responses:
        '200':
          $ref: '#/components/responses/DomainSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getDomain
      description: Returns a single domain
    put:
      summary: updateDomain
      operationId: updateDomain
      responses:
        '200':
          $ref: '#/components/responses/DomainSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Updates a domain
      requestBody:
        $ref: '#/components/requestBodies/DomainUpdateRequest'
    delete:
      summary: deleteDomain
      operationId: deleteDomain
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Deletes a domain immediately
      tags:
        - domains
  '/domains/{name}/authinfo':
    parameters:
      - schema:
          type: string
          format: hostname
        name: name
        in: path
        required: true
        description: Domain Name
    get:
      summary: getDomainAuthinfo
      tags:
        - domains
      responses:
        '200':
          $ref: '#/components/responses/DomainAuthinfoResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getDomainAuthinfo
      description: Generates and returns the authinfo for the domain
    delete:
      summary: removeDomainAuthinfo
      operationId: removeDomainAuthinfo
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Removes the authinfo from the domain
  '/domains/{name}/restore':
    parameters:
      - schema:
          type: string
          format: hostname
        name: name
        in: path
        required: true
        description: Domain Name
    post:
      summary: restoreDomain
      operationId: restoreDomain
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Restores a deleted domain
  '/domains/{name}/schedule-delete':
    parameters:
      - schema:
          type: string
          format: hostname
        name: name
        in: path
        required: true
        description: Domain Name
    post:
      summary: scheduleDomainDelete
      operationId: scheduleDomainDelete
      responses:
        '200':
          $ref: '#/components/responses/DomainSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Schedules the deletion of the domain
      requestBody:
        $ref: '#/components/requestBodies/DomainScheduleDeleteRequest'
  '/domains/{name}/unschedule-delete':
    parameters:
      - schema:
          type: string
          format: hostname
        name: name
        in: path
        required: true
        description: Domain Name
    post:
      summary: unscheduleDomainDelete
      operationId: unscheduleDomainDelete
      responses:
        '200':
          $ref: '#/components/responses/DomainSingleResponse'
        '400':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Unscheduled the pending domain deletion
  /ssl/contacts:
    get:
      summary: getSSLContacts
      tags:
        - ssl
      responses:
        '200':
          $ref: '#/components/responses/SSLContactListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSLContacts
      description: Returns all ssl contacts
      parameters:
        - $ref: '#/components/parameters/ProjectIDFilter'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/LabelsFilter'
        - $ref: '#/components/parameters/WithLabels'
    post:
      summary: createSSLContact
      operationId: createSSLContact
      responses:
        '201':
          $ref: '#/components/responses/SSLContactSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - ssl
      description: Creates a ssl contact
      requestBody:
        $ref: '#/components/requestBodies/SSLContactCreateRequest'
  '/ssl/contacts/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: SSL Contact ID
    get:
      summary: getSSLContact
      tags:
        - ssl
      responses:
        '200':
          $ref: '#/components/responses/SSLContactSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSLContact
      description: Returns a single ssl contact
    delete:
      summary: deleteSSLContact
      operationId: deleteSSLContact
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - ssl
      description: Deletes a ssl contact
  /ssl/organisations:
    get:
      summary: getSSLOrganisations
      tags:
        - ssl
      responses:
        '200':
          $ref: '#/components/responses/SSLOrganisationListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSLOrganisations
      description: Returns all ssl organisations
      parameters:
        - $ref: '#/components/parameters/ProjectIDFilter'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/LabelsFilter'
        - $ref: '#/components/parameters/WithLabels'
    post:
      summary: createSSLOrganisation
      operationId: createSSLOrganisation
      responses:
        '201':
          $ref: '#/components/responses/SSLOrganisationSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - ssl
      description: Creates a ssl organisation
      requestBody:
        $ref: '#/components/requestBodies/SSLOrganisationCreateRequest'
  '/ssl/organisations/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: SSL Organisation ID
    get:
      summary: getSSLOrganisation
      tags:
        - ssl
      responses:
        '200':
          $ref: '#/components/responses/SSLOrganisationSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSLOrganisation
      description: Returns a single ssl organisation
    delete:
      summary: deleteSSLOrganisation
      operationId: deleteSSLOrganisation
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - ssl
      description: Deletes a ssl organisation
  /ssl/types:
    get:
      summary: getSSLTypes
      tags:
        - ssl
      responses:
        '200':
          $ref: '#/components/responses/SSLTypeListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSLTypes
      description: Returns all ssl types
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
  '/ssl/types/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: SSL Type ID
    get:
      summary: getSSLType
      tags:
        - ssl
      responses:
        '200':
          $ref: '#/components/responses/SSLTypeSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSLType
      description: Returns a single ssl type
  /ssl/certificates:
    get:
      summary: getSSLCertificates
      tags:
        - ssl
      responses:
        '200':
          $ref: '#/components/responses/SSLCertificateListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSLCertificates
      description: Returns all ssl certificates
      parameters:
        - $ref: '#/components/parameters/ProjectIDFilter'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - schema:
            type: string
            format: uuid
          in: query
          name: 'filter[type_id]'
          description: SSL Type ID
        - schema:
            type: string
            format: uuid
          in: query
          name: 'filter[organisation_id]'
          description: Organisation ID
        - schema:
            type: string
            format: uuid
          in: query
          name: 'filter[admin_contact_id]'
          description: ID of Admin Contact
        - schema:
            type: string
            format: uuid
          in: query
          name: 'filter[tech_contact_id]'
          description: ID of Tech Contact
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/LabelsFilter'
        - $ref: '#/components/parameters/WithLabels'
    post:
      summary: createSSLCertificate
      operationId: createSSLCertificate
      responses:
        '201':
          $ref: '#/components/responses/SSLCertificateSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - ssl
      description: Orders a new ssl certificate
      requestBody:
        $ref: '#/components/requestBodies/SSLCertificateCreateRequest'
  '/ssl/certificates/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: SSL Certificate ID
    get:
      summary: getSSLCertificate
      tags:
        - ssl
      responses:
        '200':
          $ref: '#/components/responses/SSLCertificateSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSLCertificate
      description: Returns a single ssl certificate
  /ssh-keys:
    get:
      summary: getSSHKeys
      responses:
        '200':
          $ref: '#/components/responses/SSHKeyListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSHKeys
      description: Returns all ssh keys
      tags:
        - sshkeys
      parameters:
        - $ref: '#/components/parameters/ProjectIDFilter'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/LabelsFilter'
        - $ref: '#/components/parameters/WithLabels'
        - schema:
            type: string
          in: query
          name: 'filter[title]'
          description: Title Filter
    post:
      summary: createSSHKey
      operationId: createSSHKey
      responses:
        '201':
          $ref: '#/components/responses/SSHKeySingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - sshkeys
      description: Creates a new ssh key
      requestBody:
        $ref: '#/components/requestBodies/SSHKeyCreateRequest'
  '/ssh-keys/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: SSH Key ID
    get:
      summary: getSSHKey
      tags:
        - sshkeys
      responses:
        '200':
          $ref: '#/components/responses/SSHKeySingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSHKey
      description: Returns a single ssh key
    delete:
      summary: deleteSSHKey
      operationId: deleteSSHKey
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - sshkeys
      description: Deletes a ssh key
  /servers:
    get:
      summary: getServers
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServers
      description: Returns all servers
      parameters:
        - $ref: '#/components/parameters/ProjectIDFilter'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/LabelsFilter'
        - $ref: '#/components/parameters/WithLabels'
        - schema:
            type: string
          in: query
          name: 'filter[name]'
          description: Name Filter
    post:
      summary: createServer
      operationId: createServer
      responses:
        '201':
          $ref: '#/components/responses/ServerSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - server
      description: Creates a new server
      requestBody:
        $ref: '#/components/requestBodies/ServerCreateRequest'
  '/servers/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Server ID
    get:
      summary: getServer
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServer
      description: Returns a single server
    delete:
      summary: deleteServer
      operationId: deleteServer
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - server
      description: Deletes the server
    put:
      summary: updateServer
      operationId: updateServer
      responses:
        '200':
          $ref: '#/components/responses/ServerSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Updates the server
      tags:
        - server
      requestBody:
        $ref: '#/components/requestBodies/ServerUpdateRequest'
  /server-volumes:
    get:
      summary: getServerVolumes
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerVolumeListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerVolumes
      description: Returns all server volumes
      parameters:
        - $ref: '#/components/parameters/ProjectIDFilter'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - schema:
            type: string
            format: uuid
          in: query
          name: 'filter[server_id]'
          description: Server ID Filter
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/LabelsFilter'
        - $ref: '#/components/parameters/WithLabels'
    post:
      summary: createServerVolume
      operationId: createServerVolume
      responses:
        '200':
          $ref: '#/components/responses/ServerVolumeSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Creates a new volume
      tags:
        - server
      requestBody:
        $ref: '#/components/requestBodies/ServerVolumeCreateRequest'
  '/server-volumes/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Server Volume ID
    get:
      summary: getServerVolume
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerVolumeSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerVolume
      description: Returns a single volume
  /server-templates:
    get:
      summary: getServerTemplates
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerTemplateListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerTemplates
      description: Returns all server templates
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
        - schema:
            type: string
          in: query
          name: 'filter[title]'
          description: Title Filter
    post:
      summary: createServerTemplate
      operationId: createServerTemplate
      responses:
        '200':
          $ref: '#/components/responses/ServerTemplateSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Creates a new server template
      tags:
        - server
      requestBody:
        $ref: '#/components/requestBodies/ServerTemplateCreateRequest'
  '/server-templates/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Server Template ID
    get:
      summary: getServerTemplate
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerTemplateSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerTemplate
      description: Returns a single server template
  /server-medias:
    get:
      summary: getServerMedias
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerMediaListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerMedias
      description: Returns all server media's
      parameters:
        - $ref: '#/components/parameters/ProjectIDFilter'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/LabelsFilter'
        - $ref: '#/components/parameters/WithLabels'
        - schema:
            type: string
          in: query
          name: 'filter[title]'
          description: Title Filter
    parameters: []
    post:
      summary: createServerMedia
      operationId: createServerMedia
      responses:
        '200':
          $ref: '#/components/responses/ServerMediaSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Creates a new server media
      tags:
        - server
      requestBody:
        $ref: '#/components/requestBodies/ServerMediaCreateRequest'
  '/server-medias/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Server Media ID
    get:
      summary: getServerMedia
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerMediaSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerMedia
      description: Returns a single server media
    delete:
      summary: deleteServerMedia
      operationId: deleteServerMedia
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Deletes the server media
      tags:
        - server
  /pricing/domains:
    get:
      summary: getDomainPricingList
      tags:
        - pricing
      responses:
        '200':
          $ref: '#/components/responses/DomainPriceListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getDomainPricingList
      description: Returns the price list for all top-level-domains
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: project_id
          description: Project ID
  /search:
    get:
      summary: search
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: search
      description: 'Search for multiple resource types at once. Possible resource types are: domains, domain_handles'
      parameters:
        - schema:
            type: string
          in: query
          name: resources
          description: Comma seperated list of types
        - schema:
            type: string
          in: query
          name: search
          description: Search
        - schema:
            type: integer
          in: query
          name: limit
          description: Limit per Resource Type
        - in: query
          description: Project ID
          name: project_id
          schema:
            type: string
            format: uuid
        - schema:
            type: string
          in: query
          name: 'labels[:name]'
          description: Filters for the label with the given name. Only checks the value if it's length is greater than 0.
        - $ref: '#/components/parameters/WithLabels'
  '/domains/{name}/check':
    parameters:
      - schema:
          type: string
        name: name
        in: path
        required: true
        description: Domain Name
    get:
      summary: checkDomain
      tags:
        - domains
      responses:
        '200':
          $ref: '#/components/responses/DomainCheckResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: checkDomain
      description: Checks if the domain is available for registration
  /dns/zones:
    get:
      summary: getDNSZones
      tags:
        - dns
      responses:
        '200':
          $ref: '#/components/responses/DNSZoneListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getDNSZones
      description: Returns all dns zones
      parameters:
        - $ref: '#/components/parameters/ProjectIDFilter'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/LabelsFilter'
        - $ref: '#/components/parameters/WithLabels'
  '/dns/zones/{name}':
    parameters:
      - schema:
          type: string
        name: name
        in: path
        required: true
        description: Zone Name
    get:
      summary: getDNSZone
      tags:
        - dns
      responses:
        '200':
          $ref: '#/components/responses/DNSZoneSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getDNSZone
      description: Returns a single dns zone
    put:
      summary: updateDNSZone
      operationId: updateDNSZone
      responses:
        '200':
          $ref: '#/components/responses/DNSZoneSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Updates the dns zone
      tags:
        - dns
      requestBody:
        $ref: '#/components/requestBodies/DNSZoneUpdateRequest'
  '/dns/zones/{name}/records':
    parameters:
      - schema:
          type: string
        name: name
        in: path
        required: true
        description: Zone Name
    get:
      summary: getDNSZoneRecords
      tags:
        - dns
      responses:
        '201':
          $ref: '#/components/responses/DNSRecordListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getDNSZoneRecords
      description: Returns all records in the zone
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
    put:
      summary: updateDNSZoneRecords
      operationId: updateDNSZoneRecords
      responses:
        '200':
          $ref: '#/components/responses/DNSRecordListResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - dns
      description: Updates the records in the zone
      requestBody:
        $ref: '#/components/requestBodies/DNSRecordsUpdateRequest'
    post:
      summary: createDNSZoneRecord
      operationId: createDNSZoneRecord
      responses:
        '200':
          $ref: '#/components/responses/DNSRecordSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - dns
      description: Creates a new record in the zone
      requestBody:
        $ref: '#/components/requestBodies/DNSRecordCreateRequest'
  '/dns/zones/{name}/records/{id}':
    parameters:
      - schema:
          type: string
        name: name
        in: path
        required: true
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
    put:
      summary: updateDNSRecord
      operationId: updateDNSRecord
      responses:
        '200':
          $ref: '#/components/responses/DNSRecordSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Updates the dns record
      tags:
        - dns
      requestBody:
        $ref: '#/components/requestBodies/DNSRecordUpdateRequest'
    delete:
      summary: deleteDNSRecord
      operationId: deleteDNSRecord
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Deletes the dns record
      tags:
        - dns
  '/domains/{name}/verification':
    parameters:
      - schema:
          type: string
        name: name
        in: path
        required: true
        description: Domain Name
    get:
      summary: checkDomainVerification
      tags:
        - domains
      responses:
        '200':
          $ref: '#/components/responses/DomainCheckVerificationResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: checkDomainVerification
      description: Checks whether the owner contact is unverified
    post:
      summary: sendDomainVerification
      operationId: sendDomainVerification
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Resends the verification email in case the owner is unverified
  /availability-zones:
    get:
      summary: getAvailabilityZones
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/AvailabilityZoneListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getAvailabilityZones
      description: Returns all availability zones
      parameters:
        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPage
        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPageSize
        - $ref: ./auth-api.v1.0.yaml#/components/parameters/Search
        - schema:
            type: string
          in: query
          name: 'filter[title]'
          description: Title Filter
    post:
      summary: createAvailabilityZone
      operationId: createAvailabilityZone
      responses:
        '200':
          $ref: '#/components/responses/AvailabilityZoneSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Creates a new availability zone
      tags:
        - server
      requestBody:
        $ref: '#/components/requestBodies/AvailabilityZoneCreateRequest'
  '/availability-zones/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Availability Zone ID
    get:
      summary: getAvailabilityZone
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/AvailabilityZoneSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getAvailabilityZone
      description: Returns a single availability zone
    put:
      summary: updateAvailabilityZone
      operationId: updateAvailabilityZone
      responses:
        '200':
          $ref: '#/components/responses/AvailabilityZoneSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Updates the availability zone
      tags:
        - server
      requestBody:
        $ref: '#/components/requestBodies/AvailabilityZoneUpdateRequest'
  /server-variants:
    get:
      summary: getServerVariants
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerVariantListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerVariants
      description: Returns all server variants
      parameters:
        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPage
        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPageSize
        - $ref: ./auth-api.v1.0.yaml#/components/parameters/Search
        - schema:
            type: string
          in: query
          name: 'filter[title]'
          description: Title Filter
    post:
      summary: createServerVariant
      operationId: createServerVariant
      responses:
        '200':
          $ref: '#/components/responses/ServerVariantSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Creates a new server variant
      tags:
        - server
      requestBody:
        $ref: '#/components/requestBodies/ServerVariantCreateRequest'
  '/server-variants/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Server Variant ID
    get:
      summary: getServerVariant
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerVariantSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerVariant
      description: Returns a single server variant
    delete:
      summary: deleteServerVariant
      operationId: deleteServerVariant
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Deletes the server variant
      tags:
        - server
  /server-storage-classes:
    get:
      summary: getServerStorageClasses
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerStorageClassListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerStorageClasses
      description: Returns all storage classes
      parameters:
        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPage
        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPageSize
        - $ref: ./auth-api.v1.0.yaml#/components/parameters/Search
    parameters: []
    post:
      summary: createServerStorageClass
      operationId: createServerStorageClass
      responses:
        '200':
          $ref: '#/components/responses/ServerStorageClassSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Creates a new storage class
      tags:
        - server
      requestBody:
        $ref: '#/components/requestBodies/ServerStorageClassCreateRequest'
  '/server-storage-classes/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Server Volume Class ID
    get:
      summary: getServerStorageClass
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerStorageClassSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerStorageClass
      description: Returns a single storage class
  /networks:
    get:
      summary: getNetworks
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/NetworkListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getNetworks
      description: Returns all networks
      parameters:
        - $ref: '#/components/parameters/ProjectIDFilter'
        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPage
        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPageSize
        - $ref: ./auth-api.v1.0.yaml#/components/parameters/Search
        - $ref: '#/components/parameters/LabelsFilter'
        - $ref: '#/components/parameters/WithLabels'
        - schema:
            type: string
          in: query
          name: 'filter[title]'
          description: Title Filter
    post:
      summary: createNetwork
      operationId: createNetwork
      responses:
        '200':
          $ref: '#/components/responses/NetworkSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Creates a new network
      tags:
        - server
      requestBody:
        $ref: '#/components/requestBodies/NetworkCreateRequest'
  '/networks/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Network ID
    get:
      summary: getNetwork
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/NetworkSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getNetwork
      description: Returns a single network
  '/servers/{id}/networks':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Server ID
    get:
      summary: getServerNetworks
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerNetworkListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerNetworks
      description: Returns all server networks
      parameters:
        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPage
        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPageSize
        - $ref: ./auth-api.v1.0.yaml#/components/parameters/Search
    post:
      summary: createServerNetwork
      operationId: createServerNetwork
      responses:
        '200':
          $ref: '#/components/responses/ServerNetworkSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Adds a new network adapter to the server
      tags:
        - server
      requestBody:
        $ref: '#/components/requestBodies/ServerNetworkCreateRequest'
  '/servers/{id}/networks/{network_id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Server ID
      - schema:
          type: string
          format: uuid
        name: network_id
        in: path
        required: true
        description: Server Network ID
    delete:
      summary: deleteServerNetwork
      operationId: deleteServerNetwork
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '400':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Removes the network adapter
      tags:
        - server
  /subnets:
    get:
      summary: getSubnets
      tags:
        - address
      responses:
        '200':
          $ref: '#/components/responses/SubnetListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSubnets
      description: Returns all subnets
      parameters:
        - $ref: '#/components/parameters/ProjectIDFilter'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/LabelsFilter'
        - $ref: '#/components/parameters/WithLabels'
    post:
      summary: createSubnet
      operationId: createSubnet
      responses:
        '200':
          $ref: '#/components/responses/SubnetSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Creates a new subnet
      tags:
        - address
      requestBody:
        $ref: '#/components/requestBodies/SubnetCreateRequest'
  '/subnets/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Subnet ID
    get:
      summary: getSubnet
      tags:
        - address
      responses:
        '200':
          $ref: '#/components/responses/SubnetSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSubnet
      description: Returns a single subnet
    delete:
      summary: deleteSubnet
      operationId: deleteSubnet
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - address
      description: Deletes a subnet
  /server-hosts:
    get:
      summary: getServerHosts
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerHostListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          description: Forbidden
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerHosts
      description: Returns all server hosts
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
    post:
      summary: createServerHost
      operationId: createServerHost
      responses:
        '200':
          $ref: '#/components/responses/ServerHostSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Creates a new server host
      tags:
        - server
      requestBody:
        $ref: '#/components/requestBodies/ServerHostCreateRequest'
  '/server-hosts/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ServerHost ID
    get:
      summary: getServerHost
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerHostSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerHost
      description: Returns a single host
  /server-storages:
    get:
      summary: getServerStorages
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerStorageListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          description: Forbidden
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerStorages
      description: Returns all server storages
    post:
      summary: createServerStorage
      operationId: createServerStorage
      responses:
        '200':
          $ref: '#/components/responses/ServerStorageSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Creates a new server storage
      tags:
        - server
      requestBody:
        $ref: '#/components/requestBodies/ServerStorageCreateRequest'
  '/server-storages/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ServerStorage ID
    get:
      summary: getServerStorage
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerStorageSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerStorage
      description: Returns a single server storage
  '/subnets/{id}/addresses':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Subnet ID
    post:
      summary: createSubnetAddress
      operationId: createSubnetAddress
      responses:
        '200':
          $ref: '#/components/responses/AddressSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          description: Forbidden
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Creates a new address in the subnet
      requestBody:
        $ref: '#/components/requestBodies/SubnetAddressCreateRequest'
      tags:
        - address
  '/servers/{id}/start':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        description: Server ID
        required: true
    post:
      summary: startServer
      operationId: startServer
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - server
      description: Starts the server
  '/servers/{id}/shutdown':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Server ID
    post:
      summary: shutdownServer
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: shutdownServer
      description: Shuts the server down using a soft shutdown (ACPI Signal)
      parameters:
        - schema:
            type: boolean
          in: query
          name: force
          description: Optionally force the poweroff when the server doesn't respond to the signal in a reasonable amount of time
  '/servers/{id}/stop':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Server ID
    post:
      summary: stopServer
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: stopServer
      description: Stops the server forcefully (see shutdownServer for soft shutdown)
  '/servers/{id}/recreate':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Server ID
    post:
      summary: recreateServer
      operationId: recreateServer
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Recreates the server. This will delete all data on the root disk and the server will be freshly reinstalled.
      tags:
        - server
  '/servers/{id}/vnc':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Server ID
    get:
      summary: getServerVNC
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerVNCResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerVNC
      description: Returns vnc websocket credentials
  '/servers/{id}/actions':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Server ID
    get:
      summary: getServerActions
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerActionListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerActions
      description: Returns all actions for the server
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
  '/servers/{id}/actions/{action_id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Server ID
      - schema:
          type: string
          format: uuid
        name: action_id
        in: path
        required: true
        description: ServerAction ID
    get:
      summary: getServerAction
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerActionSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerAction
      description: Returns a single server action
  '/server-volumes/{id}/attach':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Volume ID
    post:
      summary: attachServerVolume
      operationId: attachServerVolume
      responses:
        '200':
          $ref: '#/components/responses/ServerVolumeSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Attaches the volume to the provided server
      tags:
        - server
      requestBody:
        $ref: '#/components/requestBodies/ServerVolumeAttachRequest'
  '/server-volumes/{id}/detach':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Volume ID
    post:
      summary: detachServerVolume
      operationId: detachServerVolume
      responses:
        '200':
          $ref: '#/components/responses/ServerVolumeSingleResponse'
        '400':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Detaches the volume from the current server
      tags:
        - server
  '/servers/{id}/status':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Server ID
    get:
      summary: getServerStatus
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerStatusResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerStatus
      description: Fetches the current server status
  /addresses:
    get:
      summary: getAddresses
      tags:
        - address
      responses:
        '200':
          $ref: '#/components/responses/AddressListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getAddresses
      description: Returns all addresses
      parameters:
        - $ref: '#/components/parameters/ProjectIDFilter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
  '/addresses/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: getAddress
      tags:
        - address
      responses:
        '200':
          $ref: '#/components/responses/AddressSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getAddress
      description: Returns a single address
  '/servers/{id}/resize':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    post:
      summary: resizeServer
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '409':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: resizeServer
      description: Resizes the server to the specified variant
      requestBody:
        $ref: '#/components/requestBodies/ServerResizeRequest'
  /labels:
    get:
      summary: getLabels
      tags:
        - label
      responses:
        '200':
          $ref: '#/components/responses/LabelListResponse'
        '400':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getLabels
      description: Returns all labels that are in use
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/ProjectIDFilter'
        - schema:
            type: string
          in: query
          name: 'filter[name]'
          description: Name Filter
        - schema:
            type: string
          in: query
          name: 'filter[value]'
          description: Value Filter
        - schema:
            type: string
          in: query
          name: 'filter[object_type]'
          description: Object Type Filter
  '/servers/{id}/graph':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: getServerGraph
      tags:
        - server
      responses:
        '200':
          $ref: '#/components/responses/ServerGraphResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getServerGraph
      description: Returns graph data for the server
      parameters:
        - schema:
            type: string
            enum:
              - hour
              - day
              - week
              - month
              - year
          in: query
          name: timeframe
          description: Data Timeframe
components:
  schemas:
    ResponseMessages:
      title: ResponseMessages
      type: object
      x-examples:
        example:
          warnings: []
          errors: []
          success:
            - code: 10000
              message: Action successfully executed.
      properties:
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
        infos:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
      required:
        - warnings
        - errors
        - infos
    ResponseMessage:
      title: ResponseMessage
      type: object
      properties:
        key:
          type: string
          example: general.serverError
        message:
          type: string
          example: Action successfully executed.
      required:
        - key
        - message
    ResponseMetadata:
      title: ResponseMetadata
      type: object
      properties:
        transaction_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        build_commit:
          type: string
          example: master-a0b1c2d3
        build_timestamp:
          type: string
          example: '2021-09-01 13:37:00'
      required:
        - transaction_id
        - build_commit
        - build_timestamp
    ResponsePagination:
      title: ResponsePagination
      type: object
      properties:
        page:
          type: integer
          example: 1
        page_size:
          type: integer
          example: 25
        total:
          type: integer
          example: 1500
      required:
        - page
        - page_size
        - total
    PleskLicense:
      title: PleskLicense
      type: object
      description: A Plesk License
      x-tags:
        - plesk-licenses
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        license:
          type: string
        key:
          type: string
        created_at:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
      required:
        - id
        - project_id
        - license
        - key
        - created_at
    PleskLicenseType:
      title: PleskLicenseType
      type: object
      description: A Plesk License Type
      x-tags:
        - plesk-licenses
      properties:
        id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        title:
          type: string
          example: Web Admin
      required:
        - id
        - title
    S3Bucket:
      title: S3Bucket
      type: object
      x-tags:
        - s3-storage
      description: A S3 Bucket
      properties:
        id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        project_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        title:
          type: string
          example: Example Bucket
        labels:
          type: object
          additionalProperties:
            type: string
      required:
        - id
        - project_id
        - title
    S3AccessKey:
      title: S3AccessKey
      type: object
      x-tags:
        - s3-storage
      description: A S3 Access Key
      properties:
        id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        project_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        title:
          type: string
          example: Example Access Key
        labels:
          type: object
          additionalProperties:
            type: string
      required:
        - id
        - project_id
        - title
    S3AccessGrant:
      title: S3AccessGrant
      type: object
      description: ''
      x-tags:
        - s3-storage
      properties:
        id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        bucket_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        path:
          type: string
          example: /videos
        role:
          type: string
          enum:
            - READ_ONLY
            - READ_WRITE
        labels:
          type: object
          additionalProperties:
            type: string
      required:
        - id
        - role
    DomainHandle:
      title: DomainHandle
      type: object
      x-tags:
        - domains
      properties:
        code:
          type: string
        project_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        type:
          type: string
          enum:
            - PERSON
            - ORGANISATION
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
        first_name:
          type: string
        last_name:
          type: string
        organisation:
          type: string
        street:
          type: string
        street_number:
          type: string
        additional_address:
          type: string
        postal_code:
          type: string
        city:
          type: string
        region:
          type: string
        country_code:
          type: string
          minLength: 2
          maxLength: 2
        phone:
          type: string
        fax:
          type: string
        email:
          type: string
          format: email
        id_card:
          type: string
        id_card_issue_date:
          type: string
        id_card_authority:
          type: string
        tax_number:
          type: string
        vat_number:
          type: string
        birth_date:
          type: string
        birth_country_code:
          type: string
          minLength: 2
          maxLength: 2
        birth_place:
          type: string
        birth_region:
          type: string
        company_registration_number:
          type: string
        privacy_protection:
          type: boolean
        created_at:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
      required:
        - code
        - project_id
        - type
        - gender
        - first_name
        - last_name
        - street
        - street_number
        - postal_code
        - city
        - country_code
        - email
        - privacy_protection
        - created_at
    Domain:
      title: Domain
      type: object
      x-tags:
        - domains
      properties:
        name:
          type: string
          format: hostname
        project_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        owner_handle_code:
          type: string
        admin_handle_code:
          type: string
        tech_handle_code:
          type: string
        zone_handle_code:
          type: string
        created_at:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
      required:
        - name
        - project_id
        - owner_handle_code
        - admin_handle_code
        - tech_handle_code
        - zone_handle_code
        - created_at
    DomainAuthinfo:
      title: DomainAuthinfo
      type: object
      x-tags:
        - domains
      properties:
        authinfo:
          type: string
        valid_until:
          type: string
      required:
        - authinfo
    DomainRequestNameserver:
      title: DomainRequestNameserver
      type: object
      properties:
        name:
          type: string
          format: hostname
        addresses:
          type: array
          items:
            type: string
            format: ipv4
      required:
        - name
      x-tags:
        - domains
    SSLCertificate:
      title: SSLCertificate
      type: object
      x-tags:
        - ssl
      properties:
        id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        project_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        type_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        organisation_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        admin_contact_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        tech_contact_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        approver_email:
          type: string
        valid_until:
          type: string
        created_at:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
      required:
        - id
        - project_id
        - type_id
        - organisation_id
        - admin_contact_id
        - tech_contact_id
        - approver_email
        - created_at
    SSLContact:
      title: SSLContact
      type: object
      x-tags:
        - ssl
      properties:
        id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        project_id:
          type: string
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        title:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        organisation:
          type: string
        email:
          type: string
        phone:
          type: string
        fax:
          type: string
        address:
          type: string
        additional_address:
          type: string
        city:
          type: string
        postal_code:
          type: string
        region:
          type: string
        country_code:
          type: string
        created_at:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
      required:
        - id
        - project_id
        - first_name
        - last_name
        - organisation
        - email
        - phone
        - address
        - city
        - postal_code
        - country_code
        - created_at
    SSLOrganisation:
      title: SSLOrganisation
      type: object
      x-tags:
        - ssl
      properties:
        id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        project_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        name:
          type: string
        division:
          type: string
        address:
          type: string
        additional_address:
          type: string
        city:
          type: string
        postal_code:
          type: string
        region:
          type: string
        country_code:
          type: string
        phone:
          type: string
        fax:
          type: string
        registration_number:
          type: string
        duns:
          type: string
        created_at:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
      required:
        - id
        - project_id
        - name
        - address
        - city
        - postal_code
        - country_code
        - phone
        - created_at
    SSLType:
      title: SSLType
      type: object
      x-tags:
        - ssl
      properties:
        id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        title:
          type: string
          example: PositiveSSL
      required:
        - id
        - title
    Server:
      title: Server
      type: object
      x-tags:
        - server
      properties:
        id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        project_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        name:
          type: string
        variant_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        template_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        media_id:
          type: string
          format: uuid
        created_at:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        state:
          type: string
          enum:
            - INSTALLATION
            - READY
        zone_id:
          type: string
          format: uuid
      required:
        - id
        - project_id
        - name
        - variant_id
        - template_id
        - created_at
        - state
        - zone_id
    SSHKey:
      title: SSHKey
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        project_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        title:
          type: string
        public_key:
          type: string
        created_at:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
      required:
        - id
        - project_id
        - title
        - public_key
        - created_at
    ServerTemplate:
      title: ServerTemplate
      type: object
      x-tags:
        - server
      properties:
        id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        title:
          type: string
          example: Debian 10
      required:
        - id
        - title
    ServerMedia:
      title: ServerMedia
      type: object
      x-tags:
        - server
      properties:
        id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        zone_id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        title:
          type: string
          example: GRML 2020 Full
        created_at:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        external_id:
          type: string
      required:
        - id
        - project_id
        - title
        - created_at
    ServerVolume:
      title: ServerVolume
      type: object
      x-tags:
        - server
      properties:
        id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        project_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        title:
          type: string
          example: Example Volume
        server_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        size:
          type: integer
        class_id:
          type: string
          format: uuid
        created_at:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        root:
          type: boolean
        storage_id:
          type: string
          format: uuid
      required:
        - id
        - project_id
        - title
        - size
        - created_at
    DomainPricing:
      title: DomainPricing
      type: object
      properties:
        tld:
          type: string
        create:
          type: number
        renew:
          type: number
        restore:
          type: number
      required:
        - tld
      x-tags:
        - pricing
    SearchResults:
      title: SearchResults
      type: object
      properties:
        domains:
          type: array
          items:
            $ref: '#/components/schemas/Domain'
        domain_handles:
          type: array
          items:
            $ref: '#/components/schemas/DomainHandle'
    DomainCheckResult:
      title: DomainCheckResult
      type: object
      properties:
        available:
          type: boolean
      required:
        - available
      x-tags:
        - domains
    DNSZone:
      title: DNSZone
      type: object
      x-tags:
        - dns
      properties:
        project_id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - DOMAIN
            - RDNS
        name:
          type: string
        hostmaster:
          type: string
          format: email
        ns1:
          type: string
        ns2:
          type: string
        created_at:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
      required:
        - project_id
        - type
        - name
        - hostmaster
        - ns1
        - ns2
        - created_at
    DNSRecord:
      title: DNSRecord
      type: object
      x-tags:
        - dns
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
          enum:
            - A
            - AAAA
            - MX
            - CNAME
            - SRV
            - TXT
            - PTR
        ttl:
          type: integer
        data:
          type: string
      required:
        - id
        - name
        - type
        - data
    DomainVerificationStatus:
      title: DomainVerificationStatus
      type: object
      x-tags:
        - domains
      properties:
        unverified:
          type: boolean
      required:
        - unverified
    ServerStorageClass:
      title: ServerStorageClass
      type: object
      x-tags:
        - server
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        replication:
          type: integer
      required:
        - id
        - title
        - replication
    AvailabilityZone:
      title: AvailabilityZone
      type: object
      x-tags:
        - server
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        config:
          type: object
        country_code:
          type: string
        city:
          type: string
      required:
        - id
        - title
        - country_code
        - city
    ServerVariant:
      title: ServerVariant
      type: object
      x-tags:
        - server
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        cores:
          type: integer
        memory:
          type: integer
        disk:
          type: integer
        storage_class_id:
          type: string
          format: uuid
      required:
        - id
        - title
        - cores
        - memory
        - disk
        - storage_class_id
    Network:
      title: Network
      type: object
      x-tags:
        - server
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        zone_id:
          type: string
          format: uuid
        title:
          type: string
        type:
          $ref: '#/components/schemas/NetworkType'
        tag:
          type: integer
        created_at:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
      required:
        - id
        - project_id
        - zone_id
        - title
        - created_at
    ServerNetwork:
      title: ServerNetwork
      type: object
      x-tags:
        - server
      properties:
        id:
          type: string
          format: uuid
        default:
          type: boolean
        network_id:
          type: string
          format: uuid
        address_v4_id:
          type: string
          format: uuid
        address_v6_id:
          type: string
          format: uuid
        created_at:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        host_id:
          type: string
          format: uuid
        external_id:
          type: string
      required:
        - id
        - default
        - network_id
        - created_at
    ServerHost:
      title: ServerHost
      type: object
      x-tags:
        - server
      properties:
        id:
          type: string
          format: uuid
        zone_id:
          type: string
          format: uuid
        title:
          type: string
        created_at:
          type: string
      required:
        - id
        - zone_id
        - title
        - created_at
    ServerStorage:
      title: ServerStorage
      type: object
      properties:
        id:
          type: string
          format: uuid
        zone_id:
          type: string
          format: uuid
        external_id:
          type: string
      required:
        - id
        - zone_id
        - external_id
      x-tags:
        - server
    Subnet:
      title: Subnet
      type: object
      x-tags:
        - address
      properties:
        id:
          type: string
          format: uuid
        network_id:
          type: string
          format: uuid
        address:
          type: string
        prefix:
          type: integer
        created_at:
          type: string
      required:
        - id
        - network_id
        - address
        - prefix
        - created_at
    NetworkType:
      type: string
      title: NetworkType
      enum:
        - VLAN
        - VXLAN
      x-tags:
        - server
    Address:
      title: Address
      type: object
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        subnet_id:
          type: string
          format: uuid
        address:
          type: string
        created_at:
          type: string
      required:
        - id
        - subnet_id
        - address
        - created_at
      x-tags:
        - address
    ServerVNC:
      title: ServerVNC
      type: object
      properties:
        host:
          type: string
        port:
          type: integer
        password:
          type: string
      required:
        - host
        - port
        - password
      x-tags:
        - server
    ServerAction:
      title: ServerAction
      type: object
      x-tags:
        - server
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/ServerActionType'
        cancellable:
          type: boolean
        state:
          $ref: '#/components/schemas/ServerActionState'
        started_at:
          type: string
        ended_at:
          type: string
      required:
        - id
        - type
        - cancellable
        - state
        - started_at
    ServerStatus:
      title: ServerStatus
      type: object
      x-tags:
        - server
      properties:
        online:
          type: boolean
        uptime:
          type: integer
        cpu_usage:
          type: number
        memory:
          type: integer
        memory_usage:
          type: number
      required:
        - online
    ServerCreateRequestNetwork:
      title: ServerCreateRequestNetwork
      type: object
      properties:
        network_id:
          type: string
          format: uuid
      required:
        - network_id
      x-tags:
        - server
    ServerActionType:
      type: string
      title: ServerActionType
      enum:
        - START
        - SHUTDOWN
        - STOP
        - RESIZE
      x-tags:
        - server
    ServerActionState:
      type: string
      title: ServerActionState
      enum:
        - STARTED
        - CANCELLED
        - FAILED
        - SUCCESS
      x-tags:
        - server
    Label:
      title: Label
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        object_type:
          $ref: '#/components/schemas/ObjectType'
        object_id:
          type: string
          format: uuid
      required:
        - name
        - value
        - object_type
        - object_id
    ObjectType:
      type: string
      title: ObjectType
      enum:
        - DOMAIN
        - DOMAIN_HANDLE
        - SSH_KEY
        - PLESK_LICENSE
        - SSL_CERTIFICATE
        - SSL_ORGANISATION
        - SSL_CONTACT
        - S3_BUCKET
        - S3_ACCESS_KEY
        - S3_ACCESS_GRANT
        - DNS_ZONE
        - SERVER
        - SERVER_VOLUME
        - SERVER_MEDIA
        - NETWORK
    ServerGraphEntry:
      title: ServerGraphEntry
      type: object
      properties:
        time:
          type: integer
        memory:
          type: number
        memory_usage:
          type: number
        cpu_usage:
          type: number
        disk_read:
          type: integer
        disk_write:
          type: integer
        network_ingress:
          type: number
        network_egress:
          type: number
      required:
        - time
        - memory
        - memory_usage
        - cpu_usage
        - disk_read
        - disk_write
        - network_ingress
        - network_egress
      x-tags:
        - server
  securitySchemes:
    AuthToken:
      type: http
      scheme: bearer
      description: ''
  responses:
    InvalidRequestResponse:
      description: Response for validation errors
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - messages
              - metadata
        application/xml:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - messages
    EmptyResponse:
      description: Empty Response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - messages
              - metadata
    S3BucketSingleResponse:
      description: Single S3 Bucket
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/S3Bucket'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    S3BucketListResponse:
      description: S3 Bucket List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/S3Bucket'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    S3AccessKeySingleResponse:
      description: Single S3 Access Key
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/S3AccessKey'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    S3AccessKeyListResponse:
      description: S3 Access Key List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/S3AccessKey'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    PleskLicenseSingleResponse:
      description: Single Plesk License
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/PleskLicense'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    PleskLicenseListResponse:
      description: Plesk License List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/PleskLicense'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    PleskLicenseTypeSingleResponse:
      description: Single Plesk License Type
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/PleskLicenseType'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    PleskLicenseTypeListResponse:
      description: Plesk License Type List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/PleskLicenseType'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    S3AccessGrantListResponse:
      description: S3 Access Grant List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/S3AccessGrant'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    S3AccessGrantSingleResponse:
      description: Single S3 Access Grant
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/S3AccessGrant'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    DomainHandleSingleResponse:
      description: Single Domain Handle
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/DomainHandle'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    DomainHandleListResponse:
      description: Domain Handle List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/DomainHandle'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    DomainSingleResponse:
      description: Single Domain
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/Domain'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    DomainListResponse:
      description: Domain List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Domain'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    DomainAuthinfoResponse:
      description: Authinfo
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/DomainAuthinfo'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    SSLTypeListResponse:
      description: SSLType List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SSLType'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    SSLTypeSingleResponse:
      description: Single SSLType
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/SSLType'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    SSLContactListResponse:
      description: SSLContact List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SSLContact'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    SSLContactSingleResponse:
      description: Single SSLContact
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/SSLContact'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    SSLOrganisationListResponse:
      description: SSLOrganisation List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SSLOrganisation'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    SSLOrganisationSingleResponse:
      description: Single SSLOrganisation
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/SSLOrganisation'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    SSLCertificateListResponse:
      description: SSLCertificate List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SSLCertificate'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    SSLCertificateSingleResponse:
      description: Single SSLCertificate
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/SSLCertificate'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    ServerListResponse:
      description: Server List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Server'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    ServerSingleResponse:
      description: Single Server
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/Server'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    ServerMediaListResponse:
      description: ServerMedia List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ServerMedia'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    ServerMediaSingleResponse:
      description: Single ServerMedia
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/ServerMedia'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    ServerVolumeListResponse:
      description: ServerVolume List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ServerVolume'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    ServerVolumeSingleResponse:
      description: Single ServerVolume
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/ServerVolume'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    ServerTemplateListResponse:
      description: ServerTemplate List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ServerTemplate'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    ServerTemplateSingleResponse:
      description: Single ServerTemplate
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/ServerTemplate'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    SSHKeyListResponse:
      description: SSHKey List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SSHKey'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    SSHKeySingleResponse:
      description: Single SSHKey
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/SSHKey'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    DomainPriceListResponse:
      description: DomainPrice List
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/DomainPricing'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    SearchResponse:
      description: Search Results
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/SearchResults'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    DomainCheckResponse:
      description: Domain Check
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/DomainCheckResult'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    DNSZoneListResponse:
      description: DNSZone List
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/DNSZone'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - metadata
              - success
              - data
              - messages
    DNSZoneSingleResponse:
      description: Single DNSZone
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/DNSZone'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    DNSRecordListResponse:
      description: DNSRecord List
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/DNSRecord'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - metadata
              - success
              - data
              - messages
    DNSRecordSingleResponse:
      description: Single DNSRecord
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/DNSRecord'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    DomainCheckVerificationResponse:
      description: Domain Verification Status Response
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/DomainVerificationStatus'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    NetworkListResponse:
      description: Network List
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Network'
              pagination:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponsePagination
              messages:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages
            required:
              - metadata
              - success
              - data
              - messages
    NetworkSingleResponse:
      description: Single Network
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/Network'
              messages:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages
            required:
              - metadata
              - success
              - data
              - messages
    AvailabilityZoneListResponse:
      description: AvailabilityZone List
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AvailabilityZone'
              pagination:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponsePagination
              messages:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages
            required:
              - metadata
              - success
              - data
              - messages
    AvailabilityZoneSingleResponse:
      description: Single AvailabilityZone
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/AvailabilityZone'
              messages:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages
            required:
              - metadata
              - success
              - data
              - messages
    ServerStorageClassListResponse:
      description: ServerStorageClass List
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ServerStorageClass'
              pagination:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponsePagination
              messages:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages
            required:
              - metadata
              - success
              - data
              - messages
    ServerStorageClassSingleResponse:
      description: Single ServerStorageClass
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/ServerStorageClass'
              messages:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages
            required:
              - metadata
              - success
              - data
              - messages
    ServerVariantListResponse:
      description: ServerVariant List
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ServerVariant'
              pagination:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponsePagination
              messages:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages
            required:
              - metadata
              - success
              - data
              - messages
    ServerVariantSingleResponse:
      description: Single ServerVariant
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/ServerVariant'
              messages:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages
            required:
              - metadata
              - success
              - data
              - messages
    ServerNetworkListResponse:
      description: ServerNetwork List
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ServerNetwork'
              pagination:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponsePagination
              messages:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages
            required:
              - metadata
              - success
              - data
              - messages
    ServerNetworkSingleResponse:
      description: Single ServerNetwork
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/ServerNetwork'
              pagination:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponsePagination
              messages:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages
            required:
              - metadata
              - success
              - data
              - pagination
              - messages
    ServerHostListResponse:
      description: ServerHost List
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ServerHost'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    ServerHostSingleResponse:
      description: Single ServerHost
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/ServerHost'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    ServerStorageListResponse:
      description: ServerStorage List
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ServerStorage'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - pagination
              - messages
    SubnetListResponse:
      description: Subnet List
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Subnet'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    SubnetSingleResponse:
      description: Single Subnet
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/Subnet'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    ServerStorageSingleResponse:
      description: Single ServerStorage
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/ServerStorage'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    AddressListResponse:
      description: Address List
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    AddressSingleResponse:
      description: Single Address
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/Address'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    ServerVNCResponse:
      description: ServerVNC
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/ServerVNC'
              messages:
                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages
            required:
              - metadata
              - success
              - data
              - messages
    ServerActionSingleResponse:
      description: Single ServerAction
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/ServerAction'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    ServerActionListResponse:
      description: ServerAction List
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ServerAction'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    ServerStatusResponse:
      description: ServerStatus
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/ServerStatus'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    LabelListResponse:
      description: Label List
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    ServerGraphResponse:
      description: Server Graph
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ServerGraphEntry'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
  requestBodies:
    S3BucketCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
                example: 1428d399-8861-40a5-a85f-6ed4c669bae0
              title:
                type: string
              labels:
                type: object
                additionalProperties:
                  type: string
            required:
              - project_id
              - title
      description: ''
    S3AccessKeyCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
                example: 1428d399-8861-40a5-a85f-6ed4c669bae0
              title:
                type: string
              secret_key:
                type: string
              labels:
                type: object
                additionalProperties:
                  type: string
            required:
              - project_id
              - title
              - secret_key
    PleskLicenseCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
                example: 1428d399-8861-40a5-a85f-6ed4c669bae0
              type_id:
                type: string
                format: uuid
                example: 1428d399-8861-40a5-a85f-6ed4c669bae0
              address:
                type: string
                format: ipv4
              labels:
                type: object
                additionalProperties:
                  type: string
            required:
              - project_id
              - type_id
      description: ''
    PleskLicenseUpdateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              address:
                type: string
                format: ipv4
              labels:
                type: object
                additionalProperties:
                  type: string
    S3AccessGrantCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              bucket_id:
                type: string
                format: uuid
                example: 1428d399-8861-40a5-a85f-6ed4c669bae0
              path:
                type: string
              role:
                type: string
                enum:
                  - READ_ONLY
                  - READ_WRITE
              labels:
                type: object
                additionalProperties:
                  type: string
            required:
              - role
    DomainHandleCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
                example: 1428d399-8861-40a5-a85f-6ed4c669bae0
              type:
                type: string
                enum:
                  - PERSON
                  - ORGANISATION
              gender:
                type: string
                enum:
                  - MALE
                  - FEMALE
              first_name:
                type: string
              last_name:
                type: string
              organisation:
                type: string
              street:
                type: string
              street_number:
                type: string
              additional_address:
                type: string
              postal_code:
                type: string
              city:
                type: string
              region:
                type: string
              country_code:
                type: string
                minLength: 2
                maxLength: 2
              phone:
                type: string
              fax:
                type: string
              email:
                type: string
                format: email
              id_card:
                type: string
              id_card_issue_date:
                type: string
              id_card_authority:
                type: string
              tax_number:
                type: string
              vat_number:
                type: string
              birth_date:
                type: string
              birth_country_code:
                type: string
                minLength: 2
                maxLength: 2
              birth_place:
                type: string
              birth_region:
                type: string
              company_registration_number:
                type: string
              privacy_protection:
                type: boolean
              labels:
                type: object
                additionalProperties:
                  type: string
            required:
              - project_id
              - type
              - gender
              - first_name
              - last_name
              - street
              - street_number
              - postal_code
              - city
              - country_code
              - email
    DomainHandleUpdateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              street:
                type: string
              street_number:
                type: string
              additional_address:
                type: string
              postal_code:
                type: string
              city:
                type: string
              region:
                type: string
              country_code:
                type: string
                minLength: 2
                maxLength: 2
              phone:
                type: string
              fax:
                type: string
              email:
                type: string
                format: email
              id_card:
                type: string
              id_card_issue_date:
                type: string
              id_card_authority:
                type: string
              tax_number:
                type: string
              vat_number:
                type: string
              birth_date:
                type: string
              birth_country_code:
                type: string
                minLength: 2
                maxLength: 2
              birth_place:
                type: string
              birth_region:
                type: string
              company_registration_number:
                type: string
              privacy_protection:
                type: boolean
              labels:
                type: object
                additionalProperties:
                  type: string
    DomainCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                format: hostname
              authinfo:
                type: string
              project_id:
                type: string
                format: uuid
                example: 1428d399-8861-40a5-a85f-6ed4c669bae0
              duration:
                type: integer
                minimum: 1
                maximum: 10
                exclusiveMinimum: false
              owner_handle_code:
                type: string
              admin_handle_code:
                type: string
              tech_handle_code:
                type: string
              zone_handle_code:
                type: string
              nameserver:
                type: array
                minItems: 2
                items:
                  $ref: '#/components/schemas/DomainRequestNameserver'
              labels:
                type: object
                additionalProperties:
                  type: string
            required:
              - name
              - project_id
              - owner_handle_code
              - admin_handle_code
              - tech_handle_code
              - zone_handle_code
              - nameserver
    DomainUpdateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              owner_handle_code:
                type: string
              admin_handle_code:
                type: string
              tech_handle_code:
                type: string
              zone_handle_code:
                type: string
              nameserver:
                type: array
                minItems: 2
                items:
                  $ref: '#/components/schemas/DomainRequestNameserver'
              labels:
                type: object
                additionalProperties:
                  type: string
    DomainScheduleDeleteRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              date:
                type: string
            required:
              - date
    SSLContactCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
              title:
                type: string
              first_name:
                type: string
              last_name:
                type: string
              organisation:
                type: string
              email:
                type: string
                format: email
              phone:
                type: string
              fax:
                type: string
              address:
                type: string
              additional_address:
                type: string
              city:
                type: string
              postal_code:
                type: string
              region:
                type: string
              country_code:
                type: string
              labels:
                type: object
                additionalProperties:
                  type: string
            required:
              - project_id
              - first_name
              - last_name
              - organisation
              - email
              - phone
              - address
              - city
              - postal_code
              - country_code
    SSLOrganisationCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
              name:
                type: string
              division:
                type: string
              address:
                type: string
              additional_address:
                type: string
              city:
                type: string
              postal_code:
                type: string
              region:
                type: string
              country_code:
                type: string
              phone:
                type: string
              fax:
                type: string
              registration_number:
                type: string
              duns:
                type: string
              labels:
                type: object
                additionalProperties:
                  type: string
            required:
              - project_id
              - name
              - address
              - city
              - postal_code
              - country_code
              - phone
    SSLCertificateCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
                example: 1428d399-8861-40a5-a85f-6ed4c669bae0
              type_id:
                type: string
                format: uuid
                example: 1428d399-8861-40a5-a85f-6ed4c669bae0
              organisation_id:
                type: string
                format: uuid
                example: 1428d399-8861-40a5-a85f-6ed4c669bae0
              organisation:
                type: object
              admin_contact_id:
                type: string
                format: uuid
                example: 1428d399-8861-40a5-a85f-6ed4c669bae0
              admin_contact:
                type: object
              tech_contact_id:
                type: string
                format: uuid
                example: 1428d399-8861-40a5-a85f-6ed4c669bae0
              tech_contact:
                type: object
              csr:
                type: string
              validation_method:
                type: string
                enum:
                  - DNS
                  - HTTPS
              approver_email:
                type: string
                format: email
              labels:
                type: object
                additionalProperties:
                  type: string
            required:
              - project_id
              - type_id
              - csr
              - validation_method
              - approver_email
    SSHKeyCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
                example: 1428d399-8861-40a5-a85f-6ed4c669bae0
              title:
                type: string
              public_key:
                type: string
              labels:
                type: object
                additionalProperties:
                  type: string
            required:
              - project_id
              - title
              - public_key
      description: ''
    ServerCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
                example: 1428d399-8861-40a5-a85f-6ed4c669bae0
              zone_id:
                type: string
                format: uuid
              name:
                type: string
              variant_id:
                type: string
                format: uuid
                example: 1428d399-8861-40a5-a85f-6ed4c669bae0
              template_id:
                type: string
                format: uuid
                example: 1428d399-8861-40a5-a85f-6ed4c669bae0
              ssh_keys:
                type: array
                items:
                  type: string
                  format: uuid
              networks:
                type: array
                items:
                  $ref: '#/components/schemas/ServerCreateRequestNetwork'
              labels:
                type: object
                additionalProperties:
                  type: string
            required:
              - project_id
              - zone_id
              - name
              - variant_id
              - template_id
              - ssh_keys
    DNSZoneUpdateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              hostmaster:
                type: string
                format: email
              ns1:
                type: string
              ns2:
                type: string
              labels:
                type: object
                additionalProperties:
                  type: string
    DNSRecordCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
                enum:
                  - A
                  - AAAA
                  - CNAME
                  - SRV
                  - MX
                  - TXT
                  - PTR
              ttl:
                type: integer
                minimum: 300
                maximum: 86400
              data:
                type: string
            required:
              - name
              - type
              - data
    DNSRecordsUpdateRequest:
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                type:
                  type: string
                  enum:
                    - A
                    - AAAA
                    - CNAME
                    - SRV
                    - MX
                    - TXT
                    - PTR
                ttl:
                  type: integer
                data:
                  type: string
              required:
                - name
                - type
                - data
    DNSRecordUpdateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
                enum:
                  - A
                  - AAAA
                  - CNAME
                  - SRV
                  - MX
                  - TXT
                  - PTR
              ttl:
                type: integer
                maximum: 86400
                minimum: 300
              data:
                type: string
            required:
              - name
              - type
              - data
    SubnetCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
              network_id:
                type: string
                format: uuid
              address:
                type: string
              prefix:
                type: integer
              public:
                type: boolean
            required:
              - network_id
              - address
              - prefix
    NetworkCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              zone_id:
                type: string
                format: uuid
              title:
                type: string
              project_id:
                type: string
                format: uuid
              type:
                $ref: '#/components/schemas/NetworkType'
              tag:
                type: integer
            required:
              - zone_id
              - title
    ServerHostCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              zone_id:
                type: string
                format: uuid
              title:
                type: string
              external_id:
                type: string
            required:
              - zone_id
              - title
              - external_id
    ServerMediaCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              zone_id:
                type: string
                format: uuid
              title:
                type: string
              external_id:
                type: string
            required:
              - zone_id
              - title
              - external_id
    ServerStorageClassCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              storage_ids:
                type: array
                items:
                  type: string
                  format: uuid
              title:
                type: string
              replication:
                type: integer
            required:
              - storage_ids
              - title
              - replication
    ServerStorageCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              zone_id:
                type: string
                format: uuid
              external_id:
                type: string
            required:
              - zone_id
              - external_id
    ServerTemplateCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              zones:
                type: object
              title:
                type: string
              root_slot:
                type: string
            required:
              - zones
              - title
              - root_slot
    ServerVariantCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              zone_ids:
                type: array
                format: uuid
                items:
                  type: string
              title:
                type: string
              cores:
                type: integer
              memory:
                type: integer
              disk:
                type: integer
              storage_class_id:
                type: string
                format: uuid
              legacy:
                type: boolean
                deprecated: true
                default: false
            required:
              - zone_ids
              - title
              - cores
              - memory
              - disk
              - storage_class_id
    AvailabilityZoneCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
              config:
                type: object
              country_code:
                type: string
              city:
                type: string
            required:
              - title
              - config
              - country_code
              - city
    AvailabilityZoneUpdateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
              config:
                type: object
              country_code:
                type: string
              city:
                type: string
    SubnetAddressCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              address:
                type: string
            required:
              - address
    ServerNetworkCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              network_id:
                type: string
                format: uuid
            required:
              - network_id
    ServerVolumeAttachRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              server_id:
                type: string
                format: uuid
            required:
              - server_id
    ServerUpdateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              labels:
                type: object
                additionalProperties:
                  type: string
    ServerResizeRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              variant_id:
                type: string
                format: uuid
              resize_disk:
                type: boolean
            required:
              - variant_id
    ServerVolumeCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
              title:
                type: string
              class_id:
                type: string
                format: uuid
              size:
                type: integer
              labels:
                type: object
                additionalProperties:
                  type: string
            required:
              - project_id
              - title
              - class_id
              - size
  parameters:
    ProjectIDFilter:
      name: 'filter[project_id]'
      in: query
      required: false
      schema:
        type: string
        format: uuid
      description: Project ID Filter
    PaginationPage:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
      description: Page
    PaginationPageSize:
      name: page_size
      in: query
      required: false
      schema:
        type: integer
        default: 10
      description: Page Size
    Search:
      name: search
      in: query
      required: false
      schema:
        type: string
      description: Search
    LabelsFilter:
      name: 'filter[labels][:name]'
      in: query
      required: false
      schema:
        type: string
      description: Filters for the label with the given name. Only checks the value if it's length is greater than 0.
    WithLabels:
      name: with_labels
      in: query
      required: false
      schema:
        type: boolean
      description: 'If length 0, true or 1 is given, the labels will be added to the response objects.'
security:
  - AuthToken: []
