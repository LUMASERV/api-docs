openapi: 3.0.0
info:
  title: LUMASERV Cloud API
  version: '2.0'
  contact:
    name: LUMASERV Support Team
    email: support@lumaserv.com
  description: LUMASERV API
servers:
  - url: 'https://connect.nicapi.eu/api/v2'
    description: Live
tags:
  - name: cloudserver
    description: CloudServer Management
  - name: firewall
    description: Firewall Management
  - name: projects
  - name: auth
  - name: users
  - name: networks
  - name: addresses
paths:
  /cloud/servers:
    get:
      summary: getCloudServers
      tags:
        - cloudserver
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCloudServerResponse'
      operationId: getCloudServers
      description: Returns all cloudservers
    post:
      summary: createCloudServer
      operationId: createCloudServer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCloudServerResponse'
      description: Creates a new cloudserver
      tags:
        - cloudserver
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCloudServerRequest'
  '/cloud/servers/{id}':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
        description: ID of the cloud server
    get:
      summary: getCloudServer
      tags:
        - cloudserver
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCloudServerResponse'
      operationId: getCloudServer
      description: Returns a single cloudserver
    put:
      summary: updateCloudServer
      operationId: updateCloudServer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCloudServerResponse'
      description: Updates a cloudserver
      tags:
        - cloudserver
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCloudServerRequest'
    delete:
      summary: deleteCloudServer
      operationId: deleteCloudServer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      description: Deletes a cloudserver
      tags:
        - cloudserver
  '/cloud/servers/{id}/firewall/rules':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
        description: ID of the cloud server
    get:
      summary: getCloudServerFirewallRules
      tags:
        - cloudserver
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFirewallRuleResponse'
      operationId: getCloudServerFirewallRules
      description: Returns all firewall rules of this cloud server
    post:
      summary: createCloudServerFirewallRule
      operationId: createCloudServerFirewallRule
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleFirewallRuleResponse'
      tags:
        - cloudserver
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFirewallRuleRequest'
      description: Creates a new firewall rule for this cloud server
  '/cloud/servers/{id}/firewall/rules/{rule_id}':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
        description: ID of the cloud server
      - schema:
          type: integer
          minimum: 1
        name: rule_id
        in: path
        required: true
        description: ID of the firewall rule
    get:
      summary: getCloudServerFirewallRule
      tags:
        - cloudserver
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleFirewallRuleResponse'
      operationId: getCloudServerFirewallRule
      description: Returns a single firewall rule
    put:
      summary: updateCloudServerFirewallRule
      operationId: updateCloudServerFirewallRule
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleFirewallRuleResponse'
      tags:
        - cloudserver
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFirewallRuleRequest'
        description: ''
      description: Updates the firewall rule
    delete:
      summary: deleteCloudServerFirewallRule
      operationId: deleteCloudServerFirewallRule
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      tags:
        - cloudserver
      description: Deletes the firewall rule
  /cloud/firewall/rule-sets:
    get:
      summary: getFirewallRuleSets
      tags:
        - firewall
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFirewallRuleSetResponse'
      operationId: getFirewallRuleSets
      description: Returns all firewall rulesets
    post:
      summary: createFirewallRuleSet
      operationId: createFirewallRuleSet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleFirewallRuleSetResponse'
      tags:
        - firewall
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFirewallRuleSetRequest'
        description: ''
      description: Creates a new firewall ruleset
  '/cloud/firewall/rule-sets/{id}':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
        description: ID of the ruleset
    get:
      summary: getFirewallRuleSet
      tags:
        - firewall
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleFirewallRuleSetResponse'
      operationId: getFirewallRuleSet
      description: Returns a single firewall ruleset
    delete:
      summary: deleteFirewallRuleSet
      operationId: deleteFirewallRuleSet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      tags:
        - firewall
      description: Deletes the firewall ruleset
    put:
      summary: updateFirewallRuleSet
      operationId: updateFirewallRuleSet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleFirewallRuleSetResponse'
      tags:
        - firewall
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFirewallRuleSetRequest'
      description: Updates the firewall ruleset
  '/cloud/firewall/rule-sets/{id}/rules':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
        description: ID of the ruleset
    get:
      summary: getFirewallRuleSetRules
      tags:
        - firewall
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFirewallRuleResponse'
      operationId: getFirewallRuleSetRules
      description: Returns all firewall rules in the ruleset
    post:
      summary: createFirewallRuleSetRule
      operationId: createFirewallRuleSetRule
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleFirewallRuleResponse'
      tags:
        - firewall
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFirewallRuleRequest'
        description: ''
      description: Creates a new firewall rule in the ruleset
  '/cloud/firewall/rule-sets/{id}/rules/{rule_id}':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
        description: ID of the ruleset
      - schema:
          type: integer
          minimum: 1
        name: rule_id
        in: path
        required: true
        description: ID of the rule
    get:
      summary: getFirewallRuleSetRule
      tags:
        - firewall
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleFirewallRuleResponse'
      operationId: getFirewallRuleSetRule
      description: Returns a single firewall rule
    put:
      summary: updateFirewallRuleSetRule
      operationId: updateFirewallRuleSetRule
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleFirewallRuleResponse'
      tags:
        - firewall
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFirewallRuleRequest'
      description: Updates the firewall rule
    delete:
      summary: deleteFirewallRuleSetRule
      operationId: deleteFirewallRuleSetRule
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      tags:
        - firewall
      description: Deletes the firewall rule
  /cloud/firewall/address-sets:
    get:
      summary: getFirewallAddressSets
      tags:
        - firewall
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFirewallAddressSetResponse'
      operationId: getFirewallAddressSets
      description: Returns all firewall address sets
    post:
      summary: createFirewallAddressSet
      operationId: createFirewallAddressSet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleFirewallAddressSetResponse'
      tags:
        - firewall
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFirewallAddressSetRequest'
      description: Creates a new firewall address set
  '/cloud/firewall/address-sets/{id}':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
        description: ID of the address set
    get:
      summary: getFirewallAddressSet
      tags:
        - firewall
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleFirewallAddressSetResponse'
      operationId: getFirewallAddressSet
      description: Returns a single firewall address set
    put:
      summary: updateFirewallAddressSet
      operationId: updateFirewallAddressSet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleFirewallAddressSetResponse'
      tags:
        - firewall
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFirewallAddressSetRequest'
      description: Updates the firewall address set
    delete:
      summary: deleteFirewallAddressSet
      operationId: deleteFirewallAddressSet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      tags:
        - firewall
      description: Deletes the firewall address set
  '/cloud/firewall/address-sets/{id}/addresses':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
        description: ID of the address set
    get:
      summary: getFirewallAddressSetAddresses
      tags:
        - firewall
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFirewallAddressResponse'
      operationId: getFirewallAddressSetAddresses
      description: Returns all addresses in a firewall address set
    post:
      summary: createFirewallAddressSetAddress
      operationId: createFirewallAddressSetAddress
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleFirewallAddressResponse'
      tags:
        - firewall
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFirewallAddressRequest'
      description: Adds a new address to the firewall address set
  '/cloud/firewall/address-sets/{id}/addresses/{cidr}':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
        description: ID of the address set
      - schema:
          type: string
        name: cidr
        in: path
        required: true
        description: Single IP address or IP net CIDR
    get:
      summary: getFirewallAddressSetAddress
      tags:
        - firewall
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleFirewallAddressResponse'
      operationId: getFirewallAddressSetAddress
      description: Returns a single firewall address
    put:
      summary: updateFirewallAddressSetAddress
      operationId: updateFirewallAddressSetAddress
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleFirewallAddressResponse'
      tags:
        - firewall
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFirewallAddressRequest'
      description: Updates the firewall address
    delete:
      summary: deleteFirewallAddressSetAddress
      operationId: deleteFirewallAddressSetAddress
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      tags:
        - firewall
      description: Deletes the address from the firewall address set
  /projects:
    get:
      summary: getProjects
      tags:
        - projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProjectResponse'
      operationId: getProjects
      description: Returns all projects
    post:
      summary: createProject
      operationId: createProject
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleProjectResponse'
      tags:
        - projects
      description: Create a new project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
  '/projects/{uuid}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: uuid
        in: path
        required: true
        description: UUID of the project
    get:
      summary: getProject
      tags:
        - projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleProjectResponse'
      operationId: getProject
      description: Returns a single project
    put:
      summary: updateProject
      operationId: updateProject
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleProjectResponse'
      tags:
        - projects
      description: Updates the project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
    delete:
      summary: deleteProject
      operationId: deleteProject
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      tags:
        - projects
      description: Deletes the project
  '/cloud/servers/{id}/interfaces':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
        description: ID of the cloud server
    get:
      summary: getCloudServerInterfaces
      tags:
        - cloudserver
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCloudServerInterfaceResponse'
      operationId: getCloudServerInterfaces
      description: Returns all interfaces of the cloud server
    post:
      summary: createCloudServerInterface
      operationId: createCloudServerInterface
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCloudServerInterfaceResponse'
      tags:
        - cloudserver
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCloudServerInterfaceRequest'
      description: Create a new interface on the cloud server
  '/cloud/servers/{id}/interfaces/{netname}':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
        description: ID of the cloud server
      - schema:
          type: string
          enum:
            - net0
            - net1
            - net2
            - net3
        name: netname
        in: path
        required: true
        description: Name of the interface (net0-net3)
    get:
      summary: getCloudServerInterface
      tags:
        - cloudserver
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCloudServerInterfaceResponse'
      operationId: getCloudServerInterface
      description: Returns a single cloud server interface
    delete:
      summary: deleteCloudServerInterface
      operationId: deleteCloudServerInterface
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      tags:
        - cloudserver
      description: Deletes the cloud server interface
    put:
      summary: updateCloudServerInterface
      operationId: updateCloudServerInterface
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCloudServerInterfaceResponse'
      tags:
        - cloudserver
      description: Updates the cloud server interface
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCloudServerInterfaceRequest'
        description: ''
  '/cloud/servers/{id}/storages':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
        description: ID of the cloud server
    get:
      summary: getCloudServerStorages
      tags:
        - cloudserver
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCloudServerStorageResponse'
      operationId: getCloudServerStorages
      description: Returns all storages of the cloud server
    post:
      summary: createCloudServerStorage
      operationId: createCloudServerStorage
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCloudServerStorageResponse'
      tags:
        - cloudserver
      description: Adds a new storage to the cloud server
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCloudServerStorageRequest'
  '/cloud/servers/{id}/storages/{title}':
    parameters:
      - schema:
          type: integer
          minimum: 1
        name: id
        in: path
        required: true
        description: ID of the cloud server
      - schema:
          type: string
        name: title
        in: path
        required: true
        description: Title of the storage
    get:
      summary: getCloudServerStorage
      tags:
        - cloudserver
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCloudServerStorageResponse'
      operationId: getCloudServerStorage
      description: Returns a single cloud server storage
    put:
      summary: updateCloudServerStorage
      operationId: updateCloudServerStorage
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCloudServerStorageResponse'
      tags:
        - cloudserver
      description: Updates the cloud server storage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCloudServerStorageRequest'
    delete:
      summary: deleteCloudServerStorage
      operationId: deleteCloudServerStorage
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      tags:
        - cloudserver
      description: Deletes the cloud server storage
  /auth/login:
    post:
      summary: login
      operationId: login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
      tags:
        - auth
      description: Exchanges user credentials for an auth token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
  /auth/logout:
    post:
      summary: logout
      operationId: logout
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      tags:
        - auth
      description: Invalidates the current session
  /auth/self:
    get:
      summary: getSelf
      tags:
        - auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelfResponse'
      operationId: getSelf
      description: Returns the own user
  /users:
    get:
      summary: getUsers
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserResponse'
      operationId: getUsers
      description: Returns all accessible users
  '/users/{username}':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
    get:
      summary: getUser
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleUserResponse'
      operationId: getUser
      description: Returns a single user by username
    put:
      summary: updateUser
      operationId: updateUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleUserResponse'
      tags:
        - users
      description: Updates the user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
  /cloud/networks:
    get:
      summary: getNetworks
      tags:
        - networks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNetworkResponse'
      operationId: getNetworks
      description: Returns all networks
  /addresses:
    get:
      summary: getAddresses
      tags:
        - addresses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAddressResponse'
      operationId: getAddresses
      description: Returns all accessible addresses
    post:
      summary: createAddress
      operationId: createAddress
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleAddressResponse'
      tags:
        - addresses
      description: Order a new address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAddressRequest'
  '/addresses/{address}':
    parameters:
      - schema:
          type: string
          format: ipv4
        name: address
        in: path
        required: true
        description: ''
    get:
      summary: getAddress
      tags:
        - addresses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleAddressResponse'
      operationId: getAddress
      description: Returns a single address
    put:
      summary: updateAddress
      operationId: updateAddress
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleAddressResponse'
      tags:
        - addresses
      description: Updates the address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressRequest'
    delete:
      summary: deleteAddress
      operationId: deleteAddress
      responses:
        '200':
          description: OK
      description: Deletes the address
      tags:
        - addresses
components:
  schemas:
    CloudServer:
      title: CloudServer
      type: object
      x-tags:
        - cloudserver
      x-examples:
        example:
          id: 8432
          user: john.doe
          title: My Webserver
          hostname: example.com
          cores: 1
          memory: 1024
          template: DEBIAN_10
          max_backups: 0
          max_scheduled_tasks: 0
          created_at: '2020-01-30 00:00:00'
          updated_at: '2020-01-30 00:00:00'
      description: A cloudserver
      properties:
        id:
          type: integer
        user:
          type: string
        title:
          type: string
        hostname:
          type: string
          format: hostname
        cores:
          type: integer
          minimum: 1
        memory:
          type: integer
          minimum: 1024
          multipleOf: 1024
        template:
          type: string
        max_backups:
          type: integer
          minimum: 0
        max_scheduled_tasks:
          type: integer
          minimum: 0
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
      required:
        - id
        - user
        - hostname
        - cores
        - memory
        - template
        - max_backups
        - max_scheduled_tasks
        - created_at
        - updated_at
    CloudServerInterface:
      title: CloudServerInterface
      type: object
      x-tags:
        - cloudserver
      description: A network interface of a cloudserver
      x-examples:
        example:
          netname: eth0
          title: Internet
          mac_address: '00:00:00:00:00:00'
          firewall: true
          network_id: 10001
          created_at: '2020-01-30 00:00:00'
          updated_at: '2020-01-30 00:00:00'
      properties:
        netname:
          type: string
        title:
          type: string
        mac_address:
          type: string
          pattern: '^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'
        firewall:
          type: boolean
        network_id:
          type: integer
          minimum: 1
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
      required:
        - netname
        - mac_address
        - firewall
        - network_id
        - created_at
        - updated_at
    CloudServerStorage:
      title: CloudServerStorage
      type: object
      x-tags:
        - cloudserver
      x-examples:
        example:
          title: scsi0
          size: 10
          replication: 2
          is_boot: true
          created_at: '2020-01-30 00:00:00'
          updated_at: '2020-01-30 00:00:00'
      description: A storage drive of a cloudserver
      properties:
        title:
          type: string
        size:
          type: integer
          minimum: 10
        replication:
          type: integer
          default: 2
        is_boot:
          type: boolean
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
      required:
        - title
        - size
        - replication
        - is_boot
        - created_at
        - updated_at
    FirewallAddress:
      title: FirewallAddress
      type: object
      x-tags:
        - cloudserver
      description: Address in a FirewallAddressSet
      x-examples:
        example:
          id: 10001
          address_set_id: 10001
          cidr: 127.0.0.0/8
          title: Loopback
          created_at: '2020-01-30 00:00:00'
          updated_at: '2020-01-30 00:00:00'
      properties:
        id:
          type: integer
          minimum: 1
        cidr:
          type: string
        title:
          type: string
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
      required:
        - id
        - cidr
        - title
        - created_at
        - updated_at
    FirewallAddressSet:
      title: FirewallAddressSet
      type: object
      x-tags:
        - cloudserver
      x-examples:
        example:
          id: 10001
          user: john.doe
          project_uuid: 1de37675-f868-4726-bb1d-b08d89f463f9
          title: Loopback Addresses
          created_at: '2020-01-30 00:00:00'
          updated_at: '2020-01-30 00:00:00'
      properties:
        id:
          type: integer
          minimum: 1
        user:
          type: string
        project_uuid:
          type: string
          format: uuid
        title:
          type: string
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
      required:
        - id
        - user
        - title
        - created_at
        - updated_at
    FirewallRule:
      title: FirewallRule
      type: object
      x-tags:
        - cloudserver
      description: A firewall rule or a link to a FirewallRuleSet
      x-examples:
        example:
          id: 10001
          title: Example Rule
          order: 0
          direction: IN
          action: DROP
          interface: net0
          protocol: udp
          source_address: 127.0.0.1
          destination_address_set_id: 10001
          source_port: '1234'
          destination_port: '4321'
          created_at: '2020-01-30 00:00:00'
          updated_at: '2020-01-30 00:00:00'
      properties:
        id:
          type: integer
          minimum: 1
        title:
          type: string
        order:
          type: integer
          exclusiveMinimum: false
          minimum: 0
        linked_rule_set_id:
          type: integer
        direction:
          type: string
          enum:
            - IN
            - OUT
        action:
          type: string
          enum:
            - ACCEPT
            - DROP
            - REJECT
        interface:
          type: string
          enum:
            - net0
            - net1
            - net2
            - net3
        protocol:
          type: string
          enum:
            - udp
            - tcp
        source_address:
          type: string
        source_address_set_id:
          type: integer
        destination_address:
          type: string
        destination_address_set_id:
          type: integer
        source_port:
          type: string
        destination_port:
          type: string
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
      required:
        - id
        - title
        - order
        - created_at
        - updated_at
    FirewallRuleSet:
      title: FirewallRuleSet
      type: object
      x-tags:
        - cloudserver
      x-examples:
        example:
          id: 10001
          user: john.doe
          title: Example Ruleset
          project_uuid: 1de37675-f868-4726-bb1d-b08d89f463f9
          created_at: '2020-01-30 00:00:00'
          updated_at: '2020-01-30 00:00:00'
      description: A set of firewall rules
      properties:
        id:
          type: integer
          minimum: 1
        user:
          type: string
        title:
          type: string
        project_uuid:
          type: string
          format: uuid
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
      required:
        - id
        - user
        - title
        - created_at
        - updated_at
    Timestamp:
      type: string
      title: Timestamp
      x-examples: {}
      example: '2020-01-30 00:00:00'
    CreateCloudServerRequest:
      title: CreateCloudServerRequest
      type: object
      x-tags:
        - cloudserver
      properties:
        title:
          type: string
        project_uuid:
          type: string
          format: uuid
        cores:
          type: integer
        memory:
          type: integer
          minimum: 1024
          multipleOf: 1024
        template:
          type: string
        password:
          type: string
        storages:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/CreateCloudServerStorageRequest'
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/CreateCloudServerInterfaceRequest'
      required:
        - cores
        - memory
        - template
        - storages
        - interfaces
    CreateFirewallRuleSetRequest:
      title: CreateFirewallRuleSetRequest
      type: object
      x-tags:
        - firewall
      properties:
        title:
          type: string
        project_uuid:
          type: string
          format: uuid
      required:
        - title
    CreateFirewallAddressSetRequest:
      title: CreateFirewallAddressSetRequest
      type: object
      properties:
        title:
          type: string
        project_uuid:
          type: string
          format: uuid
      required:
        - title
      x-tags:
        - firewall
    CreateFirewallAddressRequest:
      title: CreateFirewallAddressRequest
      type: object
      x-tags:
        - firewall
      description: ''
      properties:
        cidr:
          type: string
        title:
          type: string
      required:
        - cidr
        - title
    CreateFirewallRuleRequest:
      title: CreateFirewallRuleRequest
      type: object
      x-tags:
        - firewall
      properties:
        title:
          type: string
        order:
          type: integer
          minimum: 0
        direction:
          type: string
          enum:
            - IN
            - OUT
        action:
          type: string
          enum:
            - ACCEPT
            - DROP
            - REJECT
        protocol:
          type: string
          enum:
            - tcp
            - udp
        interface:
          type: string
          enum:
            - net0
            - net1
            - net2
            - net3
        source_address:
          type: string
        source_address_set_id:
          type: integer
          minimum: 1
        destination_address:
          type: string
        destination_address_set_id:
          type: integer
          minimum: 1
        source_port:
          type: string
        destination_port:
          type: string
        linked_rule_set_id:
          type: integer
          minimum: 1
      required:
        - title
        - order
    UpdateFirewallAddressSetRequest:
      title: UpdateFirewallAddressSetRequest
      type: object
      properties:
        title:
          type: string
        project_uuid:
          type: string
          format: uuid
      x-tags:
        - firewall
    UpdateFirewallRuleSetRequest:
      title: UpdateFirewallRuleSetRequest
      type: object
      properties:
        title:
          type: string
        project_uuid:
          type: string
          format: uuid
      x-tags:
        - firewall
    UpdateFirewallAddressRequest:
      title: UpdateFirewallAddressRequest
      type: object
      x-tags:
        - firewall
      properties:
        title:
          type: string
    UpdateFirewallRuleRequest:
      title: UpdateFirewallRuleRequest
      type: object
      x-tags:
        - firewall
      properties:
        title:
          type: string
        order:
          type: integer
          minimum: 0
        direction:
          type: string
          enum:
            - IN
            - OUT
        action:
          type: string
          enum:
            - ACCEPT
            - DROP
            - REJECT
        protocol:
          type: string
          enum:
            - tcp
            - udp
        source_address:
          type: string
        source_address_set_id:
          type: integer
          minimum: 1
        destination_address:
          type: string
        destination_address_set_id:
          type: integer
          minimum: 1
        source_port:
          type: string
        destination_port:
          type: string
        linked_address_set_id:
          type: integer
          minimum: 1
    UpdateCloudServerRequest:
      title: UpdateCloudServerRequest
      type: object
      x-tags:
        - cloudserver
      properties:
        title:
          type: string
        project_uuid:
          type: string
          format: uuid
        cores:
          type: integer
        memory:
          type: integer
          minimum: 1024
          multipleOf: 1024
    ResponseMetadata:
      title: ResponseMetadata
      type: object
      properties:
        clientTransactionId:
          type: string
          example: lumaserv_api_request_1234
        serverTransactionId:
          type: string
          example: '200913214225851845414'
      required:
        - serverTransactionId
    ResponseMessages:
      title: ResponseMessages
      type: object
      properties:
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
        success:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
      required:
        - warnings
        - errors
        - success
      x-examples:
        example:
          warnings: []
          errors: []
          success:
            - code: 10000
              message: Action successfully executed.
    ResponseMessage:
      title: ResponseMessage
      type: object
      properties:
        code:
          type: integer
          example: 10000
        message:
          type: string
          example: Action successfully executed.
      required:
        - code
        - message
    SingleCloudServerResponse:
      title: GetCloudServerResponse
      type: object
      x-tags:
        - cloudserver
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          $ref: '#/components/schemas/CloudServer'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
    ListCloudServerResponse:
      title: ListCloudServerResponse
      type: object
      x-tags:
        - cloudserver
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/CloudServer'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
    EmptyResponse:
      title: EmptyResponse
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - status
        - messages
    SingleFirewallAddressSetResponse:
      title: SingleFirewallAddressSetResponse
      type: object
      x-tags:
        - firewall
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          $ref: '#/components/schemas/FirewallAddressSet'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
    ListFirewallAddressSetResponse:
      title: ListFirewallAddressSetResponse
      type: object
      x-tags:
        - firewall
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/FirewallAddressSet'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
    SingleFirewallRuleSetResponse:
      title: SingleFirewallRuleSetResponse
      type: object
      x-tags:
        - firewall
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          $ref: '#/components/schemas/FirewallRuleSet'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
    ListFirewallRuleSetResponse:
      title: ListFirewallRuleSetResponse
      type: object
      x-tags:
        - firewall
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/FirewallRuleSet'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
    SingleFirewallAddressResponse:
      title: SingleFirewallAddressResponse
      type: object
      x-tags:
        - firewall
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          $ref: '#/components/schemas/FirewallAddress'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
    ListFirewallAddressResponse:
      title: ListFirewallAddressResponse
      type: object
      x-tags:
        - firewall
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/FirewallAddress'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
    SingleFirewallRuleResponse:
      title: SingleFirewallRuleResponse
      type: object
      x-tags:
        - firewall
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          $ref: '#/components/schemas/FirewallRule'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
    ListFirewallRuleResponse:
      title: ListFirewallRuleResponse
      type: object
      x-tags:
        - firewall
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/FirewallRule'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
    Project:
      title: Project
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
      x-tags:
        - projects
      x-examples:
        example:
          uuid: 095be615-a8ad-4c33-8e9c-c7612fbf6c9f
          title: Nice App
          description: A really nice app
          created_at: '2020-01-30 00:00:00'
          updated_at: '2020-01-30 00:00:00'
    CreateProjectRequest:
      title: CreateProjectRequest
      type: object
      properties:
        title:
          type: string
        description:
          type: string
      required:
        - title
      x-tags:
        - projects
    UpdateProjectRequest:
      title: UpdateProjectRequest
      type: object
      properties:
        title:
          type: string
        description:
          type: string
      x-tags:
        - projects
    SingleProjectResponse:
      title: SingleProjectResponse
      type: object
      x-tags:
        - projects
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          $ref: '#/components/schemas/Project'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
    ListProjectResponse:
      title: ListProjectResponse
      type: object
      x-tags:
        - projects
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
    CreateCloudServerInterfaceRequest:
      title: CreateCloudServerInterfaceRequest
      type: object
      x-tags:
        - cloudserver
      properties:
        network_id:
          type: integer
          minimum: 1
        ipv4:
          type: array
          items:
            type: string
            format: ipv4
        primary_ipv4:
          type: string
          format: ipv4
        custom_address:
          type: string
        custom_gateway:
          type: string
          format: ipv4
      x-examples: {}
    CreateCloudServerStorageRequest:
      title: CreateCloudServerStorageRequest
      type: object
      x-tags:
        - cloudserver
      properties:
        size:
          type: integer
          minimum: 5
        replication:
          type: integer
          default: 2
          minimum: 0
      required:
        - size
    SingleCloudServerInterfaceResponse:
      title: SingleCloudServerInterfaceResponse
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          $ref: '#/components/schemas/CloudServerInterface'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
      x-tags:
        - cloudserver
    SingleCloudServerStorageResponse:
      title: SingleCloudServerStorageResponse
      type: object
      x-tags:
        - cloudserver
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          $ref: '#/components/schemas/CloudServerStorage'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
    ListCloudServerInterfaceResponse:
      title: ListCloudServerInterfaceResponse
      type: object
      x-tags:
        - cloudserver
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/CloudServerInterface'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
    ListCloudServerStorageResponse:
      title: ListCloudServerStorageResponse
      type: object
      x-tags:
        - cloudserver
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/CloudServerStorage'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
    UpdateCloudServerInterfaceRequest:
      title: UpdateCloudServerInterfaceRequest
      type: object
      x-tags:
        - cloudserver
      properties:
        network_id:
          type: integer
          minimum: 1
        ipv4:
          type: array
          items:
            type: string
            format: ipv4
        primary_ipv4:
          type: string
          format: ipv4
        custom_address:
          type: string
        custom_gateway:
          type: string
          format: ipv4
    UpdateCloudServerStorageRequest:
      title: UpdateCloudServerStorageRequest
      type: object
      properties:
        size:
          type: integer
          minimum: 1
      x-tags:
        - cloudserver
    User:
      title: User
      type: object
      x-tags:
        - users
      properties:
        username:
          type: string
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        created_at:
          $ref: '#/components/schemas/Timestamp'
      required:
        - username
        - email
        - created_at
    LoginRequest:
      title: LoginRequest
      type: object
      x-tags:
        - auth
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    LoginResponse:
      title: LoginResponse
      type: object
      x-tags:
        - auth
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          type: object
          properties:
            token:
              type: string
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
    SelfResponse:
      title: SelfResponse
      type: object
      x-tags:
        - auth
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          $ref: '#/components/schemas/User'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
    ListUserResponse:
      title: ListUserResponse
      type: object
      x-tags:
        - users
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
    SingleUserResponse:
      title: SingleUserResponse
      type: object
      x-tags:
        - users
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          $ref: '#/components/schemas/User'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
    UpdateUserRequest:
      title: UpdateUserRequest
      type: object
      x-tags:
        - users
      properties:
        email:
          type: string
    Network:
      title: Network
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        title:
          type: string
        description:
          type: string
        is_public:
          type: boolean
        user:
          type: string
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
      required:
        - id
        - is_public
        - user
        - created_at
        - updated_at
      x-tags:
        - networks
    ListNetworkResponse:
      title: ListNetworkResponse
      type: object
      x-tags:
        - networks
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Network'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
    Address:
      title: Address
      type: object
      x-tags:
        - addresses
      properties:
        address:
          type: string
        reserved:
          type: string
        rdns:
          type: string
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
      required:
        - address
        - created_at
        - updated_at
    ListAddressResponse:
      title: ListAddressResponse
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
      x-tags:
        - addresses
    SingleAddressResponse:
      title: SingleAddressResponse
      type: object
      x-tags:
        - addresses
      properties:
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        data:
          $ref: '#/components/schemas/Address'
        status:
          type: string
        messages:
          $ref: '#/components/schemas/ResponseMessages'
      required:
        - metadata
        - data
        - status
        - messages
    CreateAddressRequest:
      title: CreateAddressRequest
      type: object
      x-tags:
        - addresses
    UpdateAddressRequest:
      title: UpdateAddressRequest
      type: object
      x-tags:
        - addresses
      properties:
        reserved:
          type: string
        rdns:
          type: string
  securitySchemes:
    AuthToken:
      type: http
      scheme: bearer
      description: ''
security:
  - AuthToken: []
