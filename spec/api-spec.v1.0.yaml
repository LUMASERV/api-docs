openapi: 3.0.0
info:
  title: LUMASERV API
  version: '1.0'
  contact:
    name: LUMASERV Support Team
    email: support@lumaserv.com
  description: LUMASERV API
servers:
  - url: 'https://api.lumaserv.cloud'
    description: Live
tags:
  - name: projects
  - name: auth
  - name: users
  - name: plesk-licenses
  - name: s3-storage
  - name: domains
  - name: ssl
paths:
  /projects:
    get:
      summary: getProjects
      tags:
        - projects
      responses:
        '200':
          $ref: '#/components/responses/ProjectListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getProjects
      description: Returns all projects
    post:
      summary: createProject
      operationId: createProject
      responses:
        '201':
          $ref: '#/components/responses/ProjectSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - projects
      description: Create a new project
      requestBody:
        $ref: '#/components/requestBodies/ProjectCreateRequest'
  '/projects/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the project
    get:
      summary: getProject
      tags:
        - projects
      responses:
        '200':
          $ref: '#/components/responses/ProjectSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getProject
      description: Returns a single project
    put:
      summary: updateProject
      operationId: updateProject
      responses:
        '200':
          $ref: '#/components/responses/ProjectSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - projects
      description: Updates the project
      requestBody:
        $ref: '#/components/requestBodies/ProjectUpdateRequest'
    delete:
      summary: deleteProject
      operationId: deleteProject
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - projects
      description: Deletes the project
  /auth/login:
    post:
      summary: login
      operationId: login
      responses:
        '200':
          $ref: '#/components/responses/LoginResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - auth
      description: Exchanges user credentials for an auth token
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
  /users:
    get:
      summary: getUsers
      tags:
        - users
      responses:
        '200':
          $ref: '#/components/responses/UserListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getUsers
      description: Returns all users
  '/users/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: User ID
    get:
      summary: getUser
      tags:
        - users
      responses:
        '200':
          $ref: '#/components/responses/UserSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getUser
      description: Returns a single user
  /storage/s3/buckets:
    get:
      summary: getS3Buckets
      tags:
        - s3-storage
      responses:
        '200':
          $ref: '#/components/responses/S3BucketListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getS3Buckets
      description: Returns all s3 buckets
    post:
      summary: createS3Bucket
      operationId: createS3Bucket
      responses:
        '201':
          $ref: '#/components/responses/S3BucketSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Creates a new s3 bucket
      tags:
        - s3-storage
      requestBody:
        $ref: '#/components/requestBodies/S3BucketCreateRequest'
  '/storage/s3/buckets/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: S3 Bucket ID
    get:
      summary: getS3Bucket
      tags:
        - s3-storage
      responses:
        '200':
          $ref: '#/components/responses/S3BucketSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getS3Bucket
      description: Returns a single s3 bucket
    delete:
      summary: deleteS3Bucket
      operationId: deleteS3Bucket
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - s3-storage
      description: Deletes a s3 bucket
  /storage/s3/access-keys:
    get:
      summary: getS3AccessKeys
      tags:
        - s3-storage
      responses:
        '200':
          $ref: '#/components/responses/S3AccessKeyListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getS3AccessKeys
      description: Returns all access keys
    post:
      summary: createS3AccessKey
      operationId: createS3AccessKey
      responses:
        '201':
          $ref: '#/components/responses/S3AccessKeySingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - s3-storage
      description: Creates a s3 access key
      requestBody:
        $ref: '#/components/requestBodies/S3AccessKeyCreateRequest'
  '/storage/s3/access-keys/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: S3 Access Key ID
    get:
      summary: getS3AccessKey
      tags:
        - s3-storage
      responses:
        '200':
          $ref: '#/components/responses/S3AccessKeySingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getS3AccessKey
      description: Returns a single s3 access key
    delete:
      summary: deleteS3AccessKey
      operationId: deleteS3AccessKey
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - s3-storage
      description: Deletes a s3 access key
  /licenses/plesk:
    get:
      summary: getPleskLicenses
      tags:
        - plesk-licenses
      operationId: getPleskLicenses
      description: Returns all plesk licenses
      responses:
        '200':
          $ref: '#/components/responses/PleskLicenseListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
    post:
      summary: createPleskLicense
      operationId: createPleskLicense
      responses:
        '201':
          $ref: '#/components/responses/PleskLicenseSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - plesk-licenses
      description: Orders a new plesk license
      requestBody:
        $ref: '#/components/requestBodies/PleskLicenseCreateRequest'
  '/licenses/plesk/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Plesk License ID
    get:
      summary: getPleskLicense
      tags:
        - plesk-licenses
      responses:
        '200':
          $ref: '#/components/responses/PleskLicenseSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getPleskLicense
      description: Returns a single plesk license
    put:
      summary: updatePleskLicense
      operationId: updatePleskLicense
      responses:
        '200':
          $ref: '#/components/responses/PleskLicenseSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - plesk-licenses
      description: Updates a plesk license
      requestBody:
        $ref: '#/components/requestBodies/PleskLicenseUpdateRequest'
  /licenses/plesk-types:
    get:
      summary: getPleskLicenseTypes
      tags:
        - plesk-licenses
      responses:
        '200':
          $ref: '#/components/responses/PleskLicenseTypeListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getPleskLicenseTypes
      description: Return all plesk license types
  '/licenses/plesk-types/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Plesk License Type ID
    get:
      summary: getPleskLicenseType
      tags:
        - plesk-licenses
      responses:
        '200':
          $ref: '#/components/responses/PleskLicenseTypeSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getPleskLicenseType
      description: Returns a single plesk license type
  '/storage/s3/access-keys/{access_key_id}/grants':
    parameters:
      - schema:
          type: string
          format: uuid
        name: access_key_id
        in: path
        required: true
        description: S3 Access Key ID
    get:
      summary: getS3AccessKeyGrants
      tags:
        - s3-storage
      responses:
        '200':
          $ref: '#/components/responses/S3AccessGrantListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getS3AccessKeyGrants
      description: Returns all grants for the s3 access key
    post:
      summary: createS3AccessKeyGrant
      operationId: createS3AccessKeyGrant
      responses:
        '201':
          $ref: '#/components/responses/S3AccessGrantSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - s3-storage
      description: Creates a new grant for the s3 access key
      requestBody:
        $ref: '#/components/requestBodies/S3AccessGrantCreateRequest'
  '/storage/s3/access-keys/{access_key_id}/grants/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: access_key_id
        in: path
        required: true
        description: S3 Access Key ID
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: S3 Access Grant ID
    delete:
      summary: deleteS3AccessKeyGrant
      operationId: deleteS3AccessKeyGrant
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Deletes a grant of a s3 access key
      tags:
        - s3-storage
  /domain-handles:
    get:
      summary: getDomainHandles
      tags:
        - domains
      responses:
        '200':
          $ref: '#/components/responses/DomainHandleListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getDomainHandles
      description: Returns all domain handles
    post:
      summary: createDomainHandle
      operationId: createDomainHandle
      responses:
        '201':
          $ref: '#/components/responses/DomainHandleSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Creates a domain handle
      requestBody:
        $ref: '#/components/requestBodies/DomainHandleCreateRequest'
  '/domain-handles/{code}':
    parameters:
      - schema:
          type: string
        name: code
        in: path
        required: true
    get:
      summary: getDomainHandle
      tags:
        - domains
      responses:
        '200':
          $ref: '#/components/responses/DomainHandleSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getDomainHandle
      description: Returns a single domain handle
    put:
      summary: updateDomainHandle
      operationId: updateDomainHandle
      responses:
        '200':
          $ref: '#/components/responses/DomainHandleSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Updates the domain handle
      requestBody:
        $ref: '#/components/requestBodies/DomainHandleUpdateRequest'
    delete:
      summary: deleteDomainHandle
      operationId: deleteDomainHandle
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Deletes the domain handle
  /domains:
    get:
      summary: getDomains
      tags:
        - domains
      responses:
        '200':
          $ref: '#/components/responses/DomainListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getDomains
      description: Returns all domains
    post:
      summary: createDomain
      operationId: createDomain
      responses:
        '201':
          $ref: '#/components/responses/DomainSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Registers or transfer a domain
      requestBody:
        $ref: '#/components/requestBodies/DomainCreateRequest'
  '/domains/{name}':
    parameters:
      - schema:
          type: string
          format: hostname
        name: name
        in: path
        required: true
        description: Domain Name
    get:
      summary: getDomain
      tags:
        - domains
      responses:
        '200':
          $ref: '#/components/responses/DomainSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getDomain
      description: Returns a single domain
    put:
      summary: updateDomain
      operationId: updateDomain
      responses:
        '200':
          $ref: '#/components/responses/DomainSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Updates a domain
      requestBody:
        $ref: '#/components/requestBodies/DomainUpdateRequest'
    delete:
      summary: deleteDomain
      operationId: deleteDomain
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Deletes a domain immediately
      tags:
        - domains
  '/domains/{name}/authinfo':
    parameters:
      - schema:
          type: string
          format: hostname
        name: name
        in: path
        required: true
        description: Domain Name
    get:
      summary: getDomainAuthinfo
      tags:
        - domains
      responses:
        '200':
          $ref: '#/components/responses/DomainAuthinfoResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getDomainAuthinfo
      description: Generates and returns the authinfo for the domain
    delete:
      summary: removeDomainAuthinfo
      operationId: removeDomainAuthinfo
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Removes the authinfo from the domain
  '/domains/{name}/restore':
    parameters:
      - schema:
          type: string
          format: hostname
        name: name
        in: path
        required: true
        description: Domain Name
    post:
      summary: restoreDomain
      operationId: restoreDomain
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Restores a deleted domain
  '/domains/{name}/schedule-delete':
    parameters:
      - schema:
          type: string
          format: hostname
        name: name
        in: path
        required: true
        description: Domain Name
    post:
      summary: scheduleDomainDelete
      operationId: scheduleDomainDelete
      responses:
        '200':
          $ref: '#/components/responses/DomainSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Schedules the deletion of the domain
      requestBody:
        $ref: '#/components/requestBodies/DomainScheduleDeleteRequest'
  '/domains/{name}/unschedule-delete':
    parameters:
      - schema:
          type: string
          format: hostname
        name: name
        in: path
        required: true
        description: Domain Name
    post:
      summary: unscheduleDomainDelete
      operationId: unscheduleDomainDelete
      responses:
        '200':
          $ref: '#/components/responses/DomainSingleResponse'
        '400':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - domains
      description: Unscheduled the pending domain deletion
  /ssl/contacts:
    get:
      summary: getSSLContacts
      tags:
        - ssl
      responses:
        '200':
          $ref: '#/components/responses/SSLContactListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSLContacts
      description: Returns all ssl contacts
    post:
      summary: createSSLContact
      operationId: createSSLContact
      responses:
        '201':
          $ref: '#/components/responses/SSLContactSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - ssl
      description: Creates a ssl contact
      requestBody:
        $ref: '#/components/requestBodies/SSLContactCreateRequest'
  '/ssl/contacts/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: SSL Contact ID
    get:
      summary: getSSLContact
      tags:
        - ssl
      responses:
        '200':
          $ref: '#/components/responses/SSLContactSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSLContact
      description: Returns a single ssl contact
    delete:
      summary: deleteSSLContact
      operationId: deleteSSLContact
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - ssl
      description: Deletes a ssl contact
  /ssl/organisations:
    get:
      summary: getSSLOrganisations
      tags:
        - ssl
      responses:
        '200':
          $ref: '#/components/responses/SSLOrganisationListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSLOrganisations
      description: Returns all ssl organisations
    post:
      summary: createSSLOrganisation
      operationId: createSSLOrganisation
      responses:
        '201':
          $ref: '#/components/responses/SSLOrganisationSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - ssl
      description: Creates a ssl organisation
      requestBody:
        $ref: '#/components/requestBodies/SSLOrganisationCreateRequest'
  '/ssl/organisations/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: SSL Organisation ID
    get:
      summary: getSSLOrganisation
      tags:
        - ssl
      responses:
        '200':
          $ref: '#/components/responses/SSLOrganisationSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSLOrganisation
      description: Returns a single ssl organisation
    delete:
      summary: deleteSSLOrganisation
      operationId: deleteSSLOrganisation
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - ssl
      description: Deletes a ssl organisation
  /ssl/types:
    get:
      summary: getSSLTypes
      tags:
        - ssl
      responses:
        '200':
          $ref: '#/components/responses/SSLTypeListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSLTypes
      description: Returns all ssl types
  '/ssl/types/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: SSL Type ID
    get:
      summary: getSSLType
      tags:
        - ssl
      responses:
        '200':
          $ref: '#/components/responses/SSLTypeSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSLType
      description: Returns a single ssl type
  /ssl/certificates:
    get:
      summary: getSSLCertificates
      tags:
        - ssl
      responses:
        '200':
          $ref: '#/components/responses/SSLCertificateListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSLCertificates
      description: Returns all ssl certificates
    post:
      summary: createSSLCertificate
      operationId: createSSLCertificate
      responses:
        '201':
          $ref: '#/components/responses/SSLCertificateSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - ssl
      description: Orders a new ssl certificate
      requestBody:
        $ref: '#/components/requestBodies/SSLCertificateCreateRequest'
  '/ssl/certificates/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: SSL Certificate ID
    get:
      summary: getSSLCertificate
      tags:
        - ssl
      responses:
        '200':
          $ref: '#/components/responses/SSLCertificateSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getSSLCertificate
      description: Returns a single ssl certificate
components:
  schemas:
    ResponseMessages:
      title: ResponseMessages
      type: object
      properties:
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
        success:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
      required:
        - warnings
        - errors
        - success
      x-examples:
        example:
          warnings: []
          errors: []
          success:
            - code: 10000
              message: Action successfully executed.
    ResponseMessage:
      title: ResponseMessage
      type: object
      properties:
        key:
          type: string
          example: general.serverError
        message:
          type: string
          example: Action successfully executed.
      required:
        - key
        - message
    Project:
      title: Project
      type: object
      x-tags:
        - projects
      x-examples:
        example:
          uuid: 095be615-a8ad-4c33-8e9c-c7612fbf6c9f
          title: Nice App
          description: A really nice app
          created_at: '2020-01-30 00:00:00'
          updated_at: '2020-01-30 00:00:00'
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
      required:
        - id
        - title
    Token:
      title: Token
      type: object
      x-tags:
        - users
      description: API / Session Token
      properties:
        token:
          type: string
      required:
        - token
    User:
      title: User
      type: object
      x-tags:
        - users
      description: ''
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
        street:
          type: string
        street_number:
          type: string
        additional_address:
          type: string
        city:
          type: string
        postal_code:
          type: string
        state:
          type: string
          enum:
            - PENDING
            - ACTIVATED
            - LOCKED
      required:
        - id
        - email
        - first_name
        - last_name
    PleskLicense:
      title: PleskLicense
      type: object
      description: A Plesk License
      x-tags:
        - plesk-licenses
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        license:
          type: string
        key:
          type: string
        created_at:
          type: string
      required:
        - id
        - project_id
        - license
        - key
        - created_at
    PleskLicenseType:
      title: PleskLicenseType
      type: object
      description: A Plesk License Type
      x-tags:
        - plesk-licenses
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
      required:
        - id
        - title
    S3Bucket:
      title: S3Bucket
      type: object
      x-tags:
        - s3-storage
      description: A S3 Bucket
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        title:
          type: string
      required:
        - id
        - project_id
        - title
    S3AccessKey:
      title: S3AccessKey
      type: object
      x-tags:
        - s3-storage
      description: A S3 Access Key
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        title:
          type: string
      required:
        - id
        - project_id
        - title
    S3AccessGrant:
      title: S3AccessGrant
      type: object
      description: ''
      x-tags:
        - s3-storage
      properties:
        id:
          type: string
          format: uuid
        bucket_id:
          type: string
          format: uuid
        path:
          type: string
        role:
          type: string
          enum:
            - READ_ONLY
            - READ_WRITE
      required:
        - id
        - role
    DomainHandle:
      title: DomainHandle
      type: object
      x-tags:
        - domains
      properties:
        code:
          type: string
        project_id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - PERSON
            - ORGANISATION
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
        first_name:
          type: string
        last_name:
          type: string
        organisation:
          type: string
        street:
          type: string
        street_number:
          type: string
        additional_address:
          type: string
        postal_code:
          type: string
        city:
          type: string
        region:
          type: string
        country_code:
          type: string
          minLength: 2
          maxLength: 2
        phone:
          type: string
        fax:
          type: string
        email:
          type: string
          format: email
        id_card:
          type: string
        id_card_issue_date:
          type: string
        id_card_authority:
          type: string
        tax_number:
          type: string
        vat_number:
          type: string
        birth_date:
          type: string
        birth_country_code:
          type: string
          minLength: 2
          maxLength: 2
        birth_place:
          type: string
        birth_region:
          type: string
        company_registration_number:
          type: string
        privacy_protection:
          type: boolean
        created_at:
          type: string
      required:
        - code
        - project_id
        - type
        - gender
        - first_name
        - last_name
        - street
        - street_number
        - postal_code
        - city
        - country_code
        - email
        - privacy_protection
        - created_at
    Domain:
      title: Domain
      type: object
      x-tags:
        - domains
      properties:
        name:
          type: string
          format: hostname
        project_id:
          type: string
          format: uuid
        owner_handle_code:
          type: string
        admin_handle_code:
          type: string
        tech_handle_code:
          type: string
        zone_handle_code:
          type: string
        created_at:
          type: string
      required:
        - name
        - project_id
        - owner_handle_code
        - admin_handle_code
        - tech_handle_code
        - zone_handle_code
        - created_at
    DomainAuthinfo:
      title: DomainAuthinfo
      type: object
      x-tags:
        - domains
      properties:
        authinfo:
          type: string
        valid_until:
          type: string
      required:
        - authinfo
    DomainRequestNameserver:
      title: DomainRequestNameserver
      type: object
      properties:
        name:
          type: string
          format: hostname
        addresses:
          type: array
          items:
            type: string
            format: ipv4
      required:
        - name
      x-tags:
        - domains
    SSLCertificate:
      title: SSLCertificate
      type: object
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        type_id:
          type: string
          format: uuid
        organisation_id:
          type: string
          format: uuid
        admin_contact_id:
          type: string
          format: uuid
        tech_contact_id:
          type: string
          format: uuid
        approver_email:
          type: string
        valid_until:
          type: string
        created_at:
          type: string
      required:
        - id
        - project_id
        - type_id
        - organisation_id
        - admin_contact_id
        - tech_contact_id
        - approver_email
        - created_at
      x-tags:
        - ssl
    SSLContact:
      title: SSLContact
      type: object
      x-tags:
        - ssl
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
        title:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        organisation:
          type: string
        email:
          type: string
        phone:
          type: string
        fax:
          type: string
        address:
          type: string
        additional_address:
          type: string
        city:
          type: string
        postal_code:
          type: string
        region:
          type: string
        country_code:
          type: string
        created_at:
          type: string
      required:
        - id
        - project_id
        - first_name
        - last_name
        - organisation
        - email
        - phone
        - address
        - city
        - postal_code
        - country_code
        - created_at
    SSLOrganisation:
      title: SSLOrganisation
      type: object
      x-tags:
        - ssl
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        name:
          type: string
        division:
          type: string
        address:
          type: string
        additional_address:
          type: string
        city:
          type: string
        postal_code:
          type: string
        region:
          type: string
        country_code:
          type: string
        phone:
          type: string
        fax:
          type: string
        registration_number:
          type: string
        duns:
          type: string
        created_at:
          type: string
      required:
        - id
        - project_id
        - name
        - address
        - city
        - postal_code
        - country_code
        - phone
        - created_at
    SSLType:
      title: SSLType
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
      required:
        - id
        - title
      x-tags:
        - ssl
  securitySchemes:
    AuthToken:
      type: http
      scheme: bearer
      description: ''
  responses:
    InvalidRequestResponse:
      description: Response for validation errors
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - messages
        application/xml:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - messages
    EmptyResponse:
      description: Empty Response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - messages
    ProjectListResponse:
      description: Project List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    ProjectSingleResponse:
      description: Single Project
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/Project'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    LoginResponse:
      description: Login Response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/Token'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    UserListResponse:
      description: User List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    UserSingleResponse:
      description: Single User
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/User'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    S3BucketSingleResponse:
      description: Single S3 Bucket
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/S3Bucket'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    S3BucketListResponse:
      description: S3 Bucket List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/S3Bucket'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    S3AccessKeySingleResponse:
      description: Single S3 Access Key
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/S3AccessKey'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    S3AccessKeyListResponse:
      description: S3 Access Key List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/S3AccessKey'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    PleskLicenseSingleResponse:
      description: Single Plesk License
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/PleskLicense'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    PleskLicenseListResponse:
      description: Plesk License List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/PleskLicense'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    PleskLicenseTypeSingleResponse:
      description: Single Plesk License Type
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/PleskLicenseType'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    PleskLicenseTypeListResponse:
      description: Plesk License Type List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/PleskLicenseType'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    S3AccessGrantListResponse:
      description: S3 Access Grant List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/S3AccessGrant'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    S3AccessGrantSingleResponse:
      description: Single S3 Access Grant
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/S3AccessGrant'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    DomainHandleSingleResponse:
      description: Single Domain Handle
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/DomainHandle'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    DomainHandleListResponse:
      description: Domain Handle List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/DomainHandle'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    DomainSingleResponse:
      description: Single Domain
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/Domain'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    DomainListResponse:
      description: Domain List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Domain'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    DomainAuthinfoResponse:
      description: Authinfo
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/DomainAuthinfo'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    SSLTypeListResponse:
      description: SSLType List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SSLType'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    SSLTypeSingleResponse:
      description: Single SSLType
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/SSLType'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    SSLContactListResponse:
      description: SSLContact List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SSLContact'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    SSLContactSingleResponse:
      description: Single SSLContact
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/SSLContact'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    SSLOrganisationListResponse:
      description: SSLOrganisation List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SSLOrganisation'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    SSLOrganisationSingleResponse:
      description: Single SSLOrganisation
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/SSLOrganisation'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    SSLCertificateListResponse:
      description: SSLCertificate List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SSLCertificate'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
    SSLCertificateSingleResponse:
      description: Single SSLCertificate
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/SSLCertificate'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - data
              - messages
  requestBodies:
    ProjectCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
            required:
              - title
    ProjectUpdateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
    LoginRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
            required:
              - username
              - password
      description: Login Request
    S3BucketCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
              title:
                type: string
            required:
              - project_id
              - title
      description: ''
    S3AccessKeyCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
              title:
                type: string
              secret_key:
                type: string
            required:
              - project_id
              - title
              - secret_key
    PleskLicenseCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
              type_id:
                type: string
                format: uuid
              address:
                type: string
                format: ipv4
            required:
              - project_id
              - type_id
      description: ''
    PleskLicenseUpdateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              address:
                type: string
                format: ipv4
    S3AccessGrantCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              bucket_id:
                type: string
                format: uuid
              path:
                type: string
              role:
                type: string
                enum:
                  - READ_ONLY
                  - READ_WRITE
            required:
              - role
    DomainHandleCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
              type:
                type: string
                enum:
                  - PERSON
                  - ORGANISATION
              gender:
                type: string
                enum:
                  - MALE
                  - FEMALE
              first_name:
                type: string
              last_name:
                type: string
              organisation:
                type: string
              street:
                type: string
              street_number:
                type: string
              additional_address:
                type: string
              postal_code:
                type: string
              city:
                type: string
              region:
                type: string
              country_code:
                type: string
                minLength: 2
                maxLength: 2
              phone:
                type: string
              fax:
                type: string
              email:
                type: string
                format: email
              id_card:
                type: string
              id_card_issue_date:
                type: string
              id_card_authority:
                type: string
              tax_number:
                type: string
              vat_number:
                type: string
              birth_date:
                type: string
              birth_country_code:
                type: string
                minLength: 2
                maxLength: 2
              birth_place:
                type: string
              birth_region:
                type: string
              company_registration_number:
                type: string
              privacy_protection:
                type: boolean
            required:
              - project_id
              - type
              - gender
              - first_name
              - last_name
              - street
              - street_number
              - postal_code
              - city
              - country_code
              - email
    DomainHandleUpdateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              street:
                type: string
              street_number:
                type: string
              additional_address:
                type: string
              postal_code:
                type: string
              city:
                type: string
              region:
                type: string
              country_code:
                type: string
                minLength: 2
                maxLength: 2
              phone:
                type: string
              fax:
                type: string
              email:
                type: string
                format: email
              id_card:
                type: string
              id_card_issue_date:
                type: string
              id_card_authority:
                type: string
              tax_number:
                type: string
              vat_number:
                type: string
              birth_date:
                type: string
              birth_country_code:
                type: string
                minLength: 2
                maxLength: 2
              birth_place:
                type: string
              birth_region:
                type: string
              company_registration_number:
                type: string
              privacy_protection:
                type: boolean
    DomainCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                format: hostname
              authinfo:
                type: string
              project_id:
                type: string
                format: uuid
              duration:
                type: integer
                minimum: 1
                maximum: 10
                exclusiveMinimum: false
              owner_handle_code:
                type: string
              admin_handle_code:
                type: string
              tech_handle_code:
                type: string
              zone_handle_code:
                type: string
              nameserver:
                type: array
                minItems: 2
                items:
                  $ref: '#/components/schemas/DomainRequestNameserver'
            required:
              - name
              - project_id
              - owner_handle_code
              - admin_handle_code
              - tech_handle_code
              - zone_handle_code
              - nameserver
    DomainUpdateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              owner_handle_code:
                type: string
              admin_handle_code:
                type: string
              tech_handle_code:
                type: string
              zone_handle_code:
                type: string
              nameserver:
                type: array
                minItems: 2
                items:
                  $ref: '#/components/schemas/DomainRequestNameserver'
    DomainScheduleDeleteRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              date:
                type: string
            required:
              - date
    SSLContactCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
              title:
                type: string
              first_name:
                type: string
              last_name:
                type: string
              organisation:
                type: string
              email:
                type: string
                format: email
              phone:
                type: string
              fax:
                type: string
              address:
                type: string
              additional_address:
                type: string
              city:
                type: string
              postal_code:
                type: string
              region:
                type: string
              country_code:
                type: string
            required:
              - project_id
              - first_name
              - last_name
              - organisation
              - email
              - phone
              - address
              - city
              - postal_code
              - country_code
    SSLOrganisationCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
              name:
                type: string
              division:
                type: string
              address:
                type: string
              additional_address:
                type: string
              city:
                type: string
              postal_code:
                type: string
              region:
                type: string
              country_code:
                type: string
              phone:
                type: string
              fax:
                type: string
              registration_number:
                type: string
              duns:
                type: string
            required:
              - project_id
              - name
              - address
              - city
              - postal_code
              - country_code
              - phone
    SSLCertificateCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              project_id:
                type: string
                format: uuid
              type_id:
                type: string
                format: uuid
              organisation_id:
                type: string
                format: uuid
              organisation:
                type: object
              admin_contact_id:
                type: string
                format: uuid
              admin_contact:
                type: object
              tech_contact_id:
                type: string
                format: uuid
              tech_contact:
                type: object
              csr:
                type: string
              validation_method:
                type: string
                enum:
                  - DNS
                  - HTTPS
              approver_email:
                type: string
                format: email
            required:
              - project_id
              - type_id
              - csr
              - validation_method
              - approver_email
security:
  - AuthToken: []
