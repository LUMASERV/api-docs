openapi: 3.0.0
info:
  title: LUMASERV Auth API
  version: '1.0'
  contact:
    name: LUMASERV Support Team
    email: support@lumaserv.com
  description: LUMASERV Auth API
servers:
  - url: 'https://auth.lumaserv.com'
    description: Live
tags:
  - name: audit
  - name: auth
  - name: countries
  - name: projects
  - name: tokens
  - name: users
paths:
  /projects:
    get:
      summary: getProjects
      tags:
        - projects
      responses:
        '200':
          $ref: '#/components/responses/ProjectListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getProjects
      description: Returns all projects
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
        - schema:
            type: boolean
          in: query
          name: detail
          description: Detail Flag
        - schema:
            type: string
          in: query
          name: 'filter[title]'
          description: Title Filter
        - schema:
            type: string
            format: uuid
          in: query
          name: 'filter[id]'
          description: ID Filter
    post:
      summary: createProject
      operationId: createProject
      responses:
        '201':
          $ref: '#/components/responses/ProjectSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - projects
      description: Create a new project
      requestBody:
        $ref: '#/components/requestBodies/ProjectCreateRequest'
  '/projects/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the project
    get:
      summary: getProject
      tags:
        - projects
      responses:
        '200':
          $ref: '#/components/responses/ProjectSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getProject
      description: Returns a single project
      parameters:
        - schema:
            type: boolean
          in: query
          name: detail
          description: Detail Flag
    put:
      summary: updateProject
      operationId: updateProject
      responses:
        '200':
          $ref: '#/components/responses/ProjectSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - projects
      description: Updates the project
      requestBody:
        $ref: '#/components/requestBodies/ProjectUpdateRequest'
    delete:
      summary: deleteProject
      operationId: deleteProject
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - projects
      description: Deletes the project
  /login:
    post:
      summary: login
      operationId: login
      responses:
        '200':
          $ref: '#/components/responses/LoginResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - auth
      description: Exchanges user credentials for an auth token
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      security: []
    parameters: []
  /users:
    get:
      summary: getUsers
      tags:
        - users
      responses:
        '200':
          $ref: '#/components/responses/UserListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getUsers
      description: Returns all users
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
        - schema:
            type: string
          in: query
          name: 'filter[customer_id]'
          description: Customer ID Filter
        - schema:
            type: string
            format: email
          in: query
          name: 'filter[email]'
          description: E-Mail Filter
        - schema:
            type: string
            enum:
              - ADMIN
              - CUSTOMER
          in: query
          name: 'filter[type]'
          description: Type Filter
        - schema:
            type: string
            enum:
              - PENDING
              - ACTIVATED
              - LOCKED
          in: query
          name: 'filter[state]'
          description: State Filter
        - schema:
            type: string
            format: uuid
          in: query
          name: 'filter[id]'
          description: ID Filter
    post:
      summary: createUser
      operationId: createUser
      responses:
        '200':
          $ref: '#/components/responses/UserSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - users
      description: Creates a new user
      requestBody:
        $ref: '#/components/requestBodies/UserCreateRequest'
  '/users/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: User ID
    get:
      summary: getUser
      tags:
        - users
      responses:
        '200':
          $ref: '#/components/responses/UserSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getUser
      description: Returns a single user
    put:
      summary: updateUser
      operationId: updateUser
      responses:
        '200':
          $ref: '#/components/responses/UserSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Updates the user
      tags:
        - users
      requestBody:
        $ref: '#/components/requestBodies/UserUpdateRequest'
  '/projects/{id}/members':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Project ID
    get:
      summary: getProjectMembers
      tags:
        - projects
      responses:
        '200':
          $ref: '#/components/responses/ProjectMemberListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getProjectMembers
      description: Returns all members of the project
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - $ref: '#/components/parameters/Search'
        - schema:
            type: string
          in: query
          name: 'filter[role]'
          description: Role Filter
    post:
      summary: addProjectMember
      operationId: addProjectMember
      responses:
        '200':
          $ref: '#/components/responses/ProjectMemberSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - projects
      requestBody:
        $ref: '#/components/requestBodies/ProjectMemberCreateRequest'
      description: Adds a member to project (admin only)
  '/projects/{id}/members/{user_id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Project ID
      - schema:
          type: string
          format: uuid
        name: user_id
        in: path
        required: true
        description: User ID
    delete:
      summary: removeProjectMember
      tags:
        - projects
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: removeProjectMember
      description: Removes a member from the project
  /validate/self:
    get:
      summary: validateSelf
      tags:
        - auth
      responses:
        '200':
          $ref: '#/components/responses/TokenValidationResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: validateSelf
      description: Validates the current token
    parameters: []
  /password-reset:
    put:
      summary: executePasswordReset
      operationId: executePasswordReset
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - auth
      description: Executes the password reset with the token from the email
      requestBody:
        $ref: '#/components/requestBodies/ExecutePasswordResetRequest'
    post:
      summary: requestPasswordReset
      operationId: requestPasswordReset
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Requests a password reset email for the given username
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBodies/RequestPasswordResetRequest'
    parameters: []
  '/validate/{token}':
    parameters:
      - schema:
          type: string
        name: token
        in: path
        required: true
    get:
      summary: validateToken
      tags:
        - auth
      responses:
        '200':
          $ref: '#/components/responses/TokenValidationResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: validateToken
      description: Validates the token
  '/users/{id}/project_memberships':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: User ID
    get:
      summary: getUserProjectMemberships
      tags:
        - users
      responses:
        '200':
          $ref: '#/components/responses/ProjectMemberListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getUserProjectMemberships
      description: Returns all project memberships of the user
  /tokens:
    get:
      summary: getTokens
      tags:
        - tokens
      responses:
        '200':
          $ref: '#/components/responses/TokenListResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getTokens
      description: Returns all tokens
      parameters:
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - schema:
            type: string
            format: uuid
          in: query
          name: 'filter[user_id]'
          description: User ID Filter
        - schema:
            type: string
            enum:
              - SESSION
              - API
          in: query
          name: 'filter[type]'
          description: Type Filter
        - schema:
            type: string
          in: query
          name: 'filter[title]'
          description: Title Filter
        - schema:
            type: string
            format: uuid
          in: query
          name: 'filter[id]'
          description: ID Filter
    post:
      summary: createToken
      operationId: createToken
      responses:
        '200':
          $ref: '#/components/responses/TokenSingleResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - tokens
      description: Creates a new api token
      requestBody:
        $ref: '#/components/requestBodies/TokenCreateRequest'
  '/tokens/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Token ID
    get:
      summary: getToken
      tags:
        - tokens
      responses:
        '200':
          $ref: '#/components/responses/TokenSingleResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getToken
      description: Returns a single token
    delete:
      summary: deleteToken
      operationId: deleteToken
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - tokens
      description: Deletes a token
  /countries:
    get:
      summary: getCountries
      tags:
        - countries
      responses:
        '200':
          $ref: '#/components/responses/CountryListResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getCountries
      description: Returns all countries
      parameters:
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
  '/countries/{code}':
    parameters:
      - schema:
          type: string
        name: code
        in: path
        required: true
    get:
      summary: getCountry
      tags:
        - countries
      responses:
        '200':
          $ref: '#/components/responses/CountrySingleResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: getCountry
      description: Returns a single country
  /transaction-log:
    post:
      summary: searchTransactionLog
      operationId: searchTransactionLog
      responses:
        '200':
          $ref: '#/components/responses/TransactionLogResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      tags:
        - audit
      description: Searches the transaction log for records
      requestBody:
        $ref: '#/components/requestBodies/TransactionLogRequest'
    parameters: []
  /audit-log:
    get:
      summary: searchAuditLog
      tags:
        - audit
      responses:
        '200':
          $ref: '#/components/responses/AuditLogEntryListResponse'
        '400':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      operationId: searchAuditLog
      description: Searches the audit log for entries matching the filter
      parameters:
        - schema:
            type: string
          in: query
          name: user_id
          description: User ID
        - schema:
            type: string
          in: query
          name: project_id
          description: Project ID
        - schema:
            type: string
          in: query
          name: object_type
          description: Object Type
        - schema:
            type: string
            format: uuid
          in: query
          name: object_id
          description: Object ID
    post:
      summary: insertAuditLogEntry
      operationId: insertAuditLogEntry
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestResponse'
        '401':
          $ref: '#/components/responses/EmptyResponse'
        '403':
          $ref: '#/components/responses/EmptyResponse'
        '404':
          $ref: '#/components/responses/EmptyResponse'
        '500':
          $ref: '#/components/responses/EmptyResponse'
      description: Inserts a new entry in the audit log
      tags:
        - audit
      requestBody:
        $ref: '#/components/requestBodies/AuditLogRequest'
components:
  schemas:
    ResponseMessages:
      title: ResponseMessages
      type: object
      x-examples:
        example:
          warnings: []
          errors: []
          success:
            - code: 10000
              message: Action successfully executed.
      properties:
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
        infos:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
      required:
        - warnings
        - errors
        - infos
    ResponseMessage:
      title: ResponseMessage
      type: object
      properties:
        key:
          type: string
          example: general.serverError
        message:
          type: string
          example: Action successfully executed.
      required:
        - key
        - message
    ResponseMetadata:
      title: ResponseMetadata
      type: object
      properties:
        transaction_id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        build_commit:
          type: string
          example: master-a0b1c2d3
        build_timestamp:
          type: string
          example: '2021-09-01 13:37:00'
      required:
        - transaction_id
        - build_commit
        - build_timestamp
    ResponsePagination:
      title: ResponsePagination
      type: object
      properties:
        page:
          type: integer
          example: 1
        page_size:
          type: integer
          example: 25
        total:
          type: integer
          example: 1500
      required:
        - page
        - page_size
        - total
    Project:
      title: Project
      type: object
      x-tags:
        - projects
      x-examples:
        example:
          uuid: 095be615-a8ad-4c33-8e9c-c7612fbf6c9f
          title: Nice App
          description: A really nice app
          created_at: '2020-01-30 00:00:00'
          updated_at: '2020-01-30 00:00:00'
      properties:
        id:
          type: string
          format: uuid
          example: 1428d399-8861-40a5-a85f-6ed4c669bae0
        title:
          type: string
          example: Example Project
      required:
        - id
        - title
    Token:
      title: Token
      type: object
      x-tags:
        - users
      description: API / Session Token
      properties:
        token:
          type: string
        user_id:
          type: string
        type:
          type: string
          enum:
            - SESSION
            - API
        scope:
          $ref: '#/components/schemas/TokenScope'
        validUntil:
          type: string
        created_at:
          type: string
      required:
        - user_id
        - type
        - scope
        - created_at
    User:
      title: User
      type: object
      x-tags:
        - users
      description: ''
      properties:
        id:
          type: string
          format: uuid
        customer_id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        gender:
          $ref: '#/components/schemas/Gender'
        type:
          $ref: '#/components/schemas/UserType'
        state:
          $ref: '#/components/schemas/UserState'
      required:
        - id
        - email
        - first_name
        - last_name
    ProjectMember:
      title: ProjectMember
      type: object
      x-tags:
        - project
      description: Member of a Project
      properties:
        user_id:
          type: string
          format: uuid
        role:
          type: string
          enum:
            - OWNER
            - USER
        project_id:
          type: string
          format: uuid
      required:
        - role
    TokenValidationInfo:
      title: TokenValidationInfo
      type: object
      x-tags:
        - auth
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          $ref: '#/components/schemas/Token'
        project_memberships:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMember'
      required:
        - user
        - token
        - project_memberships
    TokenScope:
      title: TokenScope
      type: object
      properties:
        project_id:
          type: string
          format: uuid
    UserType:
      type: string
      title: UserType
      enum:
        - CUSTOMER
        - ADMIN
    Gender:
      type: string
      title: Gender
      enum:
        - MALE
        - FEMALE
        - OTHER
    UserState:
      type: string
      title: UserState
      enum:
        - PENDING
        - ACTIVATED
        - LOCKED
    Country:
      title: Country
      type: object
      properties:
        code:
          type: string
        title:
          type: string
      required:
        - code
        - title
    AuditLogEntry:
      title: AuditLogEntry
      type: object
      x-tags:
        - audit
      properties:
        id:
          type: string
        token_id:
          type: string
          format: uuid
        ip_address:
          type: string
        user_id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        action:
          type: string
        object_type:
          type: string
        object_id:
          type: string
          format: uuid
        date:
          type: string
        context:
          type: object
      required:
        - id
        - token_id
        - user_id
        - action
        - date
  securitySchemes:
    AuthToken:
      type: http
      scheme: bearer
      description: ''
  responses:
    InvalidRequestResponse:
      description: Response for validation errors
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - messages
              - metadata
        application/xml:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - success
              - messages
    EmptyResponse:
      description: Empty Response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - messages
              - metadata
    ProjectListResponse:
      description: Project List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    ProjectSingleResponse:
      description: Single Project
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/Project'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    LoginResponse:
      description: Login Response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/Token'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    UserListResponse:
      description: User List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    UserSingleResponse:
      description: Single User
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/User'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
    ProjectMemberListResponse:
      description: ProjectMember List
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectMember'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - success
              - data
              - messages
              - metadata
    TokenValidationResponse:
      description: Token Validation
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/TokenValidationInfo'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    TokenListResponse:
      description: Token List
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
              - metadata
              - success
              - data
              - messages
    TokenSingleResponse:
      description: Single Token
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/Token'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    CountryListResponse:
      description: Country List
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    CountrySingleResponse:
      description: Single Country
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/Country'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    TransactionLogResponse:
      description: Audit Log
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                type: array
                items:
                  type: object
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    AuditLogEntryListResponse:
      description: AuditLogEntry List
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLogEntry'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
            required:
              - metadata
              - success
              - data
              - messages
    ProjectMemberSingleResponse:
      description: ProjectMember Single
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/ProjectMember'
              messages:
                $ref: '#/components/schemas/ResponseMessages'
              metadata:
                $ref: '#/components/schemas/ResponseMetadata'
            required:
              - success
              - data
              - messages
              - metadata
  requestBodies:
    ProjectCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
            required:
              - title
    ProjectUpdateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
    LoginRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
            required:
              - username
              - password
      description: Login Request
    RequestPasswordResetRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
            required:
              - username
    ExecutePasswordResetRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
              password:
                type: string
            required:
              - token
              - password
    TokenCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              user_id:
                type: string
                format: uuid
              title:
                type: string
              scope:
                $ref: '#/components/schemas/TokenScope'
            required:
              - title
    UserCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              gender:
                $ref: '#/components/schemas/Gender'
              first_name:
                type: string
              last_name:
                type: string
              company:
                type: string
              email:
                type: string
                format: email
              password:
                type: string
              type:
                $ref: '#/components/schemas/UserType'
            required:
              - gender
              - first_name
              - last_name
              - email
              - password
    UserUpdateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              gender:
                $ref: '#/components/schemas/Gender'
              first_name:
                type: string
              last_name:
                type: string
              company:
                type: string
              type:
                $ref: '#/components/schemas/UserType'
              state:
                $ref: '#/components/schemas/UserState'
              email:
                type: string
                format: email
              password:
                type: string
              customer_id:
                type: string
                format: uuid
    TransactionLogRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              query:
                type: object
              sort:
                type: object
              limit:
                type: integer
            required:
              - query
    AuditLogRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              token_id:
                type: string
                format: uuid
              action:
                type: string
              ip_address:
                type: string
              project_id:
                type: string
                format: uuid
              object_type:
                type: string
              object_id:
                type: string
                format: uuid
              context:
                type: object
            required:
              - token_id
              - action
    ProjectMemberCreateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              user_id:
                type: string
                format: uuid
              role:
                type: string
                enum:
                  - USER
                  - OWNER
                default: USER
            required:
              - user_id
  parameters:
    PaginationPage:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
      description: Page
    PaginationPageSize:
      name: page_size
      in: query
      required: false
      schema:
        type: integer
        default: 10
      description: Page Size
    Search:
      name: search
      in: query
      required: false
      schema:
        type: string
      description: Search
security:
  - AuthToken: []
